CCS PCH C Compiler, Version 4.120, 5967               02-abr.-14 22:06

               Filename: C:\Users\Jannier\Documents\Proyectos Ingenieria\pinguino HACK\Pinguino JACSS\Ejemplos\8_LCDGRAFICA\BITMAP.lst

               ROM used: 4226 bytes (13%)
                         Largest free fragment is 20346
               RAM used: 1017 (50%) at main() level
                         1038 (51%) worst case
               Stack:    5 locations

*
2000:  GOTO   2D8E
.................... #include <18F4550.h>  
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV1,VREGEN,NOPBADEN 
.................... //#use delay(clock=48000000)  //#use delay(clock=20000000) 
.................... #include <usb_bootloader.h> //Comenta esta línea si no usas Bootloader 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                     USB_BOOTLOADER.H                              //// 
.................... ////                                                                   //// 
.................... ////  This include file must be included by any application loaded     //// 
.................... ////  by the example USB bootloader (ex_usb_bootloader                 //// 
.................... ////                                                                   //// 
.................... ////  The directives in this file relocate the reset and interrupt     //// 
.................... ////  vectors as well as reserving space for the bootloader.           //// 
.................... ////                                                                   //// 
.................... ////  For more documentation see ex_usb_bootloader.c                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// VERSION HISTORY                                                   //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... //how big is the bootloader? 
.................... //the bootloader will reside from address 0x0000 to this location.  the 
.................... //application will then sit at this location+1 to the end of program memory. 
.................... //#if defined(__DEBUG) 
.................... #define LOADER_SIZE        (0x1FFF) 
.................... //#else 
.................... //#define LOADER_SIZE        (0x17FF) 
.................... //#endif 
....................  
.................... //the loader and application need a common flag that determines if we are in 
.................... //the bootloader or application, that way the ISR knows where to go.  this 
.................... //is the location in ram that is reserved for this flag. 
.................... #define LOC_IN_LOADER_FLAG  0x25 
....................  
.................... //// --- end configuration --- //////////////////////////////////////////// 
....................  
.................... #reserve LOC_IN_LOADER_FLAG 
....................  
.................... int8 g_InBootloader; 
.................... #locate g_InBootloader=LOC_IN_LOADER_FLAG 
....................  
.................... #define LOADER_START       (0) 
.................... #define LOADER_END         (LOADER_SIZE) 
.................... #define APPLICATION_START  (LOADER_SIZE+1) 
.................... #if defined(__USB_87J50__) 
....................  #define APPLICATION_END    (getenv("PROGRAM_MEMORY")-9) //configuration bits 
.................... #else 
....................  #define APPLICATION_END    (getenv("PROGRAM_MEMORY")-1) 
.................... #endif  
.................... #define APPLICATION_ISR    (APPLICATION_START+8) 
....................  
.................... #ifdef _bootloader 
....................  /* 
....................   Provide an empty application, so if you load this .HEX file into the pic 
....................   without an application this will prevent the pic from executing unknown code. 
....................  */ 
....................  #org APPLICATION_START,APPLICATION_START+0xF 
....................  void BlankApplication(void)  
....................  { 
....................    while(TRUE); 
....................  } 
....................  
....................  //we need to prevent the loader from using application space 
....................  #if (APPLICATION_END > 0x10000) 
....................    #org APPLICATION_START+0x10, 0xFFFF {} 
....................    #if (APPLICATION_END > 0x20000) 
....................       #org 0x10000, 0x1FFFF {} 
....................       #org 0x20000, APPLICATION_END {} 
....................    #else 
....................       #org 0x10000, APPLICATION_END {} 
....................    #endif 
....................  #else 
....................    #org APPLICATION_START+0x10, APPLICATION_END {} 
....................  #endif 
....................  
....................    #define  USB_CONFIG_PID       0x0034 
....................  
....................    #define USB_STRINGS_OVERWRITTEN 
....................    char USB_STRING_DESC_OFFSET[]={0,4,12}; 
....................  
....................    // Here is where the "CCS" Manufacturer string and "SERIAL DEMO" are stored. 
....................    // Strings are saved as unicode. 
....................    // These strings are mostly only displayed during the add hardware wizard. 
....................    // Once the operating system drivers have been installed it will usually display 
....................    // the name from the drivers .INF. 
....................    char const USB_STRING_DESC[]={ 
....................       //string 0 
....................             4, //length of string index 
....................             0x03, //USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................             0x09,0x04,   //Microsoft Defined for US-English 
....................       //string 1  - manufacturer 
....................             8, //length of string index 
....................             0x03, //USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................             'C',0, 
....................             'C',0, 
....................             'S',0, 
....................       //string 2 - product 
....................             30, //length of string index 
....................             0x03, //USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................             'C',0, 
....................             'D',0, 
....................             'C',0, 
....................             ' ',0, 
....................             'B',0, 
....................             'o',0, 
....................             'o',0, 
....................             't',0, 
....................             'l',0, 
....................             'o',0, 
....................             'a',0, 
....................             'd',0, 
....................             'e',0, 
....................             'r',0 
....................    }; 
.................... #endif   //_bootloader 
....................  
.................... #ifndef _bootloader 
....................  //in the application, this moves the reset and isr vector out of the bootload 
....................  //space.  it then reserves the loader space from being used by the application. 
....................  #build(reset=APPLICATION_START, interrupt=APPLICATION_ISR) 
....................  #org 0, LOADER_END {} 
.................... #endif 
....................  
.................... #USE DELAY (Clock = 20000000) 
*
28E0:  MOVLW  03
28E2:  MOVLB  4
28E4:  SUBWF  x16,F
28E6:  BNC   28FC
28E8:  MOVLW  04
28EA:  MOVWF  FEA
28EC:  MOVLW  16
28EE:  MOVWF  FE9
28F0:  MOVF   FEF,W
28F2:  BZ    28FC
28F4:  BRA    28F8
28F6:  BRA    28F8
28F8:  DECFSZ FEF,F
28FA:  BRA    28F6
28FC:  MOVLB  0
28FE:  GOTO   29E6 (RETURN)
2902:  MOVLW  04
2904:  MOVWF  FEA
2906:  MOVLW  17
2908:  MOVWF  FE9
290A:  MOVF   FEF,W
290C:  BZ    2928
290E:  MOVLW  06
2910:  MOVWF  01
2912:  CLRF   00
2914:  DECFSZ 00,F
2916:  BRA    2914
2918:  DECFSZ 01,F
291A:  BRA    2912
291C:  MOVLW  7B
291E:  MOVWF  00
2920:  DECFSZ 00,F
2922:  BRA    2920
2924:  DECFSZ FEF,F
2926:  BRA    290E
2928:  RETURN 0
....................  
.................... #USE RS232 (BAUD = 57600, UART1) 
....................  
.................... //#INCLUDE <math.h> 
.................... #INCLUDE "nokia_LCD.c" 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... // DESCRIPCIÓN DE LAS FUNCIONES 
.................... // 
.................... // void nokia_write_dorc(byte bytefornokia)              USO INTERNO 
.................... // void nokia_write_data(byte bytefornokia_data)         USO INTERNO 
.................... // void nokia_printchar(byte caracter)                   IMPRIME EL CARACTER 
.................... // void nokia_write_command(byte bytefornokia_command)   MANDA EL COMANDO 
.................... // void nokia_gotoxy(byte xnokia, byte ynokia)           SE POSICIONA EN X/Y 
.................... // void nokia_clean_ddram(void)                          LIMPIA LA PANTALLA 
.................... // void Lcd_init(void)                                   INICIALIZA LA LCD 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... // CONFIGURACION DE LA CONEXION 
.................... // 
.................... // Conectamos la LCD al PORTB en los pines indicados 
.................... // 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... #DEFINE Pin_Nok_SClk PIN_A0 
.................... #DEFINE Pin_Nok_SDa  PIN_A1 
.................... #DEFINE Pin_Nok_DC   PIN_A2 
.................... #DEFINE Pin_Nok_CS   PIN_A3 
.................... #DEFINE Pin_Nok_Res  PIN_A4 
.................... // FIN CONFIGURACION 
....................  
.................... #define NEGRITA      0  // 7x8 
.................... #define COMPRIMIDA   1  // 3x6 
.................... #define NORMAL       2  // 5x7 
....................  
.................... #define NEGRO        1 
.................... #define BLANCO       0 
....................  
.................... #define SOLIDO       1 
.................... #define TRANSPARENTE 0 
....................  
.................... #define ANCHOPANTALLA   84 
.................... #define ALTOPANTALLA    48 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... /* 
.................... Tabla de Instrucciones de la LCD. Siempre con D/C=0 
....................  
.................... 0010 0xyz         // X=1 -> Driver en OFF 
....................                      Y=1 -> Direccionamiento Vertical 
....................                      Z=1 -> Comandos Extendidos 
....................  
.................... Modo de pantalla 
.................... 0000 1001   0x09   // Entera Negra 
.................... 0000 1000   0x08   // Entera Blanco 
.................... 0000 1100   0x0c   // Modo Normal 
.................... 0000 1101   0x0d   // Vídeo Inverso 
....................  
.................... Control de Temperatura 
.................... 0100 0100   0x44  // Coeficiente de temperatura 0 
.................... 0100 0101   0x45  // Coeficiente de temperatura 1 
.................... 0100 0110   0x46  // Coeficiente de temperatura 2 
.................... 0100 0111   0x47  // Coeficiente de temperatura 3 
....................  
.................... Bias (Contraste?) 
.................... 0001 0xxx         // Establece el valor para Bias 
....................  
.................... Vop 
.................... 1xxx xxxx         // Establece el valor para Vop 
.................... */ 
....................  
.................... char MemoriaVideo[504]; 
....................  
.................... // F1-ñ -> 0xFC,0x09,0x05,0x05,0xF8 
.................... // D1-Ñ ->        
.................... int8 const ASCII_TABLE[490]={ 
....................                   0x00,0x00,0x00,0x00,0x00,   // 20 space 
....................                   0x00,0x00,0x5f,0x00,0x00,   // 21 ! 
....................                   0x00,0x07,0x00,0x07,0x00,   // 22 " 
....................                   0x14,0x7f,0x14,0x7f,0x14,   // 23 # 
....................                   0x24,0x2a,0x7f,0x2a,0x12,   // 24 $ 
....................                   0x23,0x13,0x08,0x64,0x62,   // 25 % 
....................                   0x36,0x49,0x55,0x22,0x50,   // 26 & 
....................                   0x00,0x05,0x03,0x00,0x00,   // 27 ' 
....................                   0x00,0x1c,0x22,0x41,0x00,   // 28 ( 
....................                   0x00,0x41,0x22,0x1c,0x00,   // 29 ) 
....................                   0x14,0x08,0x3e,0x08,0x14,   // 2a * 
....................                   0x08,0x08,0x3e,0x08,0x08,   // 2b + 
....................                   0x00,0x50,0x30,0x00,0x00,   // 2c , 
....................                   0x08,0x08,0x08,0x08,0x08,   // 2d - 
....................                   0x00,0x60,0x60,0x00,0x00,   // 2e . 
....................                   0x20,0x10,0x08,0x04,0x02,   // 2f / 
....................                   0x3e,0x51,0x49,0x45,0x3e,   // 30 0 
....................                   0x00,0x42,0x7f,0x40,0x00,   // 31 1 
....................                   0x42,0x61,0x51,0x49,0x46,   // 32 2 
....................                   0x21,0x41,0x45,0x4b,0x31,   // 33 3 
....................                   0x18,0x14,0x12,0x7f,0x10,   // 34 4 
....................                   0x27,0x45,0x45,0x45,0x39,   // 35 5 
....................                   0x3c,0x4a,0x49,0x49,0x30,   // 36 6 
....................                   0x01,0x71,0x09,0x05,0x03,   // 37 7 
....................                   0x36,0x49,0x49,0x49,0x36,   // 38 8 
....................                   0x06,0x49,0x49,0x29,0x1e,   // 39 9 
....................                   0x00,0x36,0x36,0x00,0x00,   // 3a : 
....................                   0x00,0x56,0x36,0x00,0x00,   // 3b ; 
....................                   0x08,0x14,0x22,0x41,0x00,   // 3c < 
....................                   0x14,0x14,0x14,0x14,0x14,   // 3d = 
....................                   0x00,0x41,0x22,0x14,0x08,   // 3e > 
....................                   0x02,0x01,0x51,0x09,0x06,   // 3f ? 
....................                   0x32,0x49,0x79,0x41,0x3e,   // 40 @ 
....................                   0x7e,0x11,0x11,0x11,0x7e,   // 41 A 
....................                   0x7f,0x49,0x49,0x49,0x36,   // 42 B 
....................                   0x3e,0x41,0x41,0x41,0x22,   // 43 C 
....................                   0x7f,0x41,0x41,0x22,0x1c,   // 44 D 
....................                   0x7f,0x49,0x49,0x49,0x41,   // 45 E 
....................                   0x7f,0x09,0x09,0x09,0x01,   // 46 F 
....................                   0x3e,0x41,0x49,0x49,0x7a,   // 47 G 
....................                   0x7f,0x08,0x08,0x08,0x7f,   // 48 H 
....................                   0x00,0x41,0x7f,0x41,0x00,   // 49 I 
....................                   0x20,0x40,0x41,0x3f,0x01,   // 4a J 
....................                   0x7f,0x08,0x14,0x22,0x41,   // 4b K 
....................                   0x7f,0x40,0x40,0x40,0x40,   // 4c L 
....................                   0x7f,0x02,0x0c,0x02,0x7f,   // 4d M 
....................                   0x7f,0x04,0x08,0x10,0x7f,   // 4e N 
....................                   0x3e,0x41,0x41,0x41,0x3e,   // 4f O ////////////////////////////////                   
....................                   0x7f,0x09,0x09,0x09,0x06,   // 50 P 
....................                   0x3e,0x41,0x51,0x21,0x5e,   // 51 Q 
....................                   0x7f,0x09,0x19,0x29,0x46,   // 52 R 
....................                   0x46,0x49,0x49,0x49,0x31,   // 53 S 
....................                   0x01,0x01,0x7f,0x01,0x01,   // 54 T 
....................                   0x3f,0x40,0x40,0x40,0x3f,   // 55 U 
....................                   0x1f,0x20,0x40,0x20,0x1f,   // 56 V 
....................                   0x3f,0x40,0x38,0x40,0x3f,   // 57 W 
....................                   0x63,0x14,0x08,0x14,0x63,   // 58 X 
....................                   0x07,0x08,0x70,0x08,0x07,   // 59 Y 
....................                   0x61,0x51,0x49,0x45,0x43,   // 5a Z 
....................                   0x00,0x7f,0x41,0x41,0x00,   // 5b [ 
....................                   0x02,0x04,0x08,0x10,0x20,   // 5c 
....................                   0x00,0x41,0x41,0x7f,0x00,   // 5d 
....................                   0x04,0x02,0x01,0x02,0x04,   // 5e 
....................                   0x40,0x40,0x40,0x40,0x40,   // 5f 
....................                   0x00,0x01,0x02,0x04,0x00,   // 60 
....................                   0x20,0x54,0x54,0x54,0x78,   // 61 a 
....................                   0x7f,0x48,0x44,0x44,0x38,   // 62 b 
....................                   0x38,0x44,0x44,0x44,0x20,   // 63 c 
....................                   0x38,0x44,0x44,0x48,0x7f,   // 64 d 
....................                   0x38,0x54,0x54,0x54,0x18,   // 65 e 
....................                   0x08,0x7e,0x09,0x01,0x02,   // 66 f 
....................                   0x0c,0x52,0x52,0x52,0x3e,   // 67 g 
....................                   0x7f,0x08,0x04,0x04,0x78,   // 68 h 
....................                   0x00,0x44,0x7d,0x40,0x00,   // 69 i 
....................                   0x20,0x40,0x44,0x3d,0x00,   // 6a j 
....................                   0x7f,0x10,0x28,0x44,0x00,   // 6b k 
....................                   0x00,0x41,0x7f,0x40,0x00,   // 6c l 
....................                   0x7c,0x04,0x18,0x04,0x78,   // 6d m 
....................                   0x7c,0x08,0x04,0x04,0x78,   // 6e n 
....................                   0x38,0x44,0x44,0x44,0x38,   // 6f o 
....................                   0x7c,0x14,0x14,0x14,0x08,   // 70 p 
....................                   0x08,0x14,0x14,0x18,0x7c,   // 71 q 
....................                   0x7c,0x08,0x04,0x04,0x08,   // 72 r 
....................                   0x48,0x54,0x54,0x54,0x20,   // 73 s 
....................                   0x04,0x3f,0x44,0x40,0x20,   // 74 t 
....................                   0x3c,0x40,0x40,0x20,0x7c,   // 75 u 
....................                   0x1c,0x20,0x40,0x20,0x1c,   // 76 v 
....................                   0x3c,0x40,0x30,0x40,0x3c,   // 77 w 
....................                   0x44,0x28,0x10,0x28,0x44,   // 78 x 
....................                   0x0c,0x50,0x50,0x50,0x3c,   // 79 y 
....................                   0x44,0x64,0x54,0x4c,0x44,   // 7a z 
....................                   0x00,0x08,0x36,0x41,0x00,   // 7b 
....................                   0x00,0x00,0x7f,0x00,0x00,   // 7c 
....................                   0x00,0x41,0x36,0x08,0x00,   // 7d 
....................                   0x10,0x08,0x08,0x10,0x08,   // 7e 
....................                   0x78,0x46,0x41,0x46,0x78,  // 7F 
....................                   0x7C,0x09,0x05,0x05,0x78,  // 80 -> ñ 
....................                   0x7E,0x05,0x09,0x11,0x7E   // 81 -> Ñ 
....................                   };   // 7f 
....................    
....................    
.................... char const Fuente_3_6 [195]={   /* System 3x6 (char #32 to #96) */ 
....................           0x00,0x00,0x00, /* Espace   0x20 */ 
....................           0x00,0x5C,0x00, /* ! */ 
....................           0x0C,0x00,0x0C, /* " */ 
....................           0x7C,0x28,0x7C, /* # */ 
....................           0x7C,0x44,0x7C, /* 0x */ 
....................           0x24,0x10,0x48, /* % */ 
....................           0x28,0x54,0x08, /* & */ 
....................           0x00,0x0C,0x00, /* ' */ 
....................           0x38,0x44,0x00, /* ( */ 
....................           0x44,0x38,0x00, /* ) */ 
....................           0x20,0x10,0x08, /* // */ 
....................           0x10,0x38,0x10, /* + */ 
....................           0x80,0x40,0x00, /* , */ 
....................           0x10,0x10,0x10, /* - */ 
....................           0x00,0x40,0x00, /* . */ 
....................           0x20,0x10,0x08, /* / */ 
....................           0x38,0x44,0x38, /* 0   0x30 */ 
....................           0x00,0x7C,0x00, /* 1 */ 
....................           0x64,0x54,0x48, /* 2 */ 
....................           0x44,0x54,0x28, /* 3 */ 
....................           0x1C,0x10,0x7C, /* 4 */ 
....................           0x4C,0x54,0x24, /* 5 */ 
....................           0x38,0x54,0x20, /* 6 */ 
....................           0x04,0x74,0x0C, /* 7 */ 
....................           0x28,0x54,0x28, /* 8 */ 
....................           0x08,0x54,0x38, /* 9 */ 
....................           0x00,0x50,0x00, /* : */ 
....................           0x80,0x50,0x00, /* ; */ 
....................           0x10,0x28,0x44, /* < */ 
....................           0x28,0x28,0x28, /* = */ 
....................           0x44,0x28,0x10, /* > */ 
....................           0x04,0x54,0x08, /* ? */ 
....................           0x38,0x4C,0x5C, /* @   0x40 */ 
....................           0x78,0x14,0x78, /* A */ 
....................           0x7C,0x54,0x28, /* B */ 
....................           0x38,0x44,0x44, /* C */ 
....................           0x7C,0x44,0x38, /* D */ 
....................           0x7C,0x54,0x44, /* E */ 
....................           0x7C,0x14,0x04, /* F */ 
....................           0x38,0x44,0x34, /* G */ 
....................           0x7C,0x10,0x7C, /* H */ 
....................           0x00,0x7C,0x00, /* I */ 
....................           0x20,0x40,0x3C, /* J */ 
....................           0x7C,0x10,0x6C, /* K */ 
....................           0x7C,0x40,0x40, /* L */ 
....................           0x7C,0x08,0x7C, /* M */ 
....................           0x7C,0x04,0x7C, /* N */ 
....................           0x7C,0x44,0x7C, /* O */ 
....................           0x7C,0x14,0x08, /* P   0x50 */ 
....................           0x38,0x44,0x78, /* Q */ 
....................           0x7C,0x14,0x68, /* R */ 
....................           0x48,0x54,0x24, /* S */ 
....................           0x04,0x7C,0x04, /* T */ 
....................           0x7C,0x40,0x7C, /* U */ 
....................           0x3C,0x40,0x3C, /* V */ 
....................           0x7C,0x20,0x7C, /* W */ 
....................           0x6C,0x10,0x6C, /* X */ 
....................           0x1C,0x60,0x1C, /* Y */ 
....................           0x64,0x54,0x4C, /* Z */ 
....................           0x7C,0x44,0x00, /* [ */ 
....................           0x08,0x10,0x20, /* \ */ 
....................           0x44,0x7C,0x00, /* ] */ 
....................           0x08,0x04,0x08, /* ^ */ 
....................           0x80,0x80,0x80, /* _ */ 
....................           0x04,0x08,0x00 /* `   0x60 */ 
.................... }; 
....................  
.................... char const Fuente_7_8 [685]={   /* System 7x8 (char #32 to #128) */ 
....................  
....................           0,   0,   0,   0,   0,   0,   0, //' ' 
....................           0,   6,  95,  95,   6,   0,   0, //'!' 
....................           0,   7,   7,   0,   7,   7,   0, //'"' 
....................          20, 127, 127,  20, 127, 127,  20, //'#' 
....................          36,  46, 107, 107,  58,  18,   0, //'$' 
....................          70, 102,  48,  24,  12, 102,  98, //'%' 
....................          48, 122,  79,  93,  55, 122,  72, //'&' 
....................           4,   7,   3,   0,   0,   0,   0, //''' 
....................           0,  28,  62,  99,  65,   0,   0, //'(' 
....................           0,  65,  99,  62,  28,   0,   0, //')' 
....................           8,  42,  62,  28,  28,  62,  42, //'*' 
....................           8,   8,  62,  62,   8,   8,   0, //'+' 
....................           0, 128, 224,  96,   0,   0,   0, //',' 
....................           8,   8,   8,   8,   8,   8,   0, //'-' 
....................           0,   0,  96,  96,   0,   0,   0, //'.' 
....................          96,  48,  24,  12,   6,   3,   1, //'/' 
....................          62, 127, 113,  89,  77, 127,  62, //'0' 
....................          64,  66, 127, 127,  64,  64,   0, //'1' 
....................          98, 115,  89,  73, 111, 102,   0, //'2' 
....................          34,  99,  73,  73, 127,  54,   0, //'3' 
....................          24,  28,  22,  83, 127, 127,  80, //'4' 
....................          39, 103,  69,  69, 125,  57,   0, //'5' 
....................          60, 126,  75,  73, 121,  48,   0, //'6' 
....................           3,   3, 113, 121,  15,   7,   0, //'7' 
....................          54, 127,  73,  73, 127,  54,   0, //'8' 
....................           6,  79,  73, 105,  63,  30,   0, //'9' 
....................           0,   0, 102, 102,   0,   0,   0, //':' 
....................           0, 128, 230, 102,   0,   0,   0, //';' 
....................           8,  28,  54,  99,  65,   0,   0, //'<' 
....................          36,  36,  36,  36,  36,  36,   0, //'=' 
....................           0,  65,  99,  54,  28,   8,   0, //'>' 
....................           2,   3,  81,  89,  15,   6,   0, //'?' 
....................          62, 127,  65,  93,  93,  31,  30, //'@' 
....................          124, 126,  19,  19, 126, 124,  0, //'A' 
....................          65, 127, 127,  73,  73, 127,  54, //'B' 
....................          28,  62,  99,  65,  65,  99,  34,  //'C' 
....................          65, 127, 127,  65,  99,  62,  28, //'D' 
....................          65, 127, 127,  73,  93,  65,  99, //'E' 
....................          65, 127, 127,  73,  29,   1,   3, //'F' 
....................          28,  62,  99,  65,  81, 115, 114, //'G' 
....................          127, 127,   8,   8, 127, 127,  0, //'H' 
....................           0,  65, 127, 127,  65,   0,   0, //'I' 
....................          48, 112,  64,  65, 127,  63,   1, //'J' 
....................          65, 127, 127,   8,  28, 119,  99, //'K' 
....................          65, 127, 127,  65,  64,  96, 112, //'L' 
....................          127, 127,  14,  28,  14, 127,127, //'M' 
....................          127, 127,   6,  12,  24, 127,127, //'N' 
....................          28,  62,  99,  65,  99,  62,  28, //'O' 
....................          65, 127, 127,  73,   9,  15,   6, //'P' 
....................          30,  63,  33, 113, 127,  94,   0, //'Q' 
....................          65, 127, 127,   9,  25, 127, 102, //'R' 
....................          38, 111,  77,  89, 115,  50,   0, //'S' 
....................           3,  65, 127, 127,  65,   3,   0, //'T' 
....................          127, 127,  64,  64, 127, 127,   0, //'U' 
....................          31,  63,  96,  96,  63,  31,   0, //'V' 
....................          127, 127,  48, 24,  48, 127, 127, //'W' 
....................          67, 103,  60,  24,  60, 103,  67, //'X' 
....................           7,  79, 120, 120,  79,   7,   0, //'Y' 
....................          71,  99, 113,  89,  77, 103, 115, //'Z' 
....................           0, 127, 127,  65,  65,   0,   0, //'[' 
....................           1,   3,   6,  12,  24,  48,  96, //'\' 
....................           0,  65,  65, 127, 127,   0,   0, //']' 
....................           8,  12,   6,   3,   6,  12,   8, //'^' 
....................          128, 128, 128, 128, 128,128, 128, //'_' 
....................           0,   0,   3,   7,   4,   0,   0, //'`' 
....................          32, 116,  84,  84,  60, 120,  64, //'a' 
....................          65, 127,  63,  72,  72, 120,  48, //'b' 
....................          56, 124,  68,  68, 108,  40,   0, //'c' 
....................          48, 120,  72,  73,  63, 127,  64, //'d' 
....................          56, 124,  84,  84,  92,  24,   0, //'e' 
....................          72, 126, 127,  73,   3,   2,   0, //'f' 
....................          56, 188, 164, 164, 252, 120,   0, //'g' 
....................          65, 127, 127,   8,   4, 124, 120, //'h' 
....................           0,  68, 125, 125,  64,   0,   0, //'i' 
....................          96, 224, 128, 128, 253, 125,   0, //'j' 
....................          65, 127, 127,  16,  56, 108,  68, //'k' 
....................           0,  65, 127, 127,  64,   0,   0, //'l' 
....................          120, 124,  28, 56,  28, 124, 120, //'m' 
....................          124, 124,  4,   4, 124, 120,   0, //'n' 
....................          56, 124,  68,  68, 124,  56,   0, //'o' 
....................          0, 252, 252, 164,   36,  60,  24, //'p' 
....................          24,  60,  36, 164, 248, 252, 132, //'q' 
....................          68, 124, 120,  76,   4,  28,  24, //'r' 
....................          72,  92,  84,  84, 116,  36,   0, //'s' 
....................           0,   4,  62, 127,  68,  36,   0, //'t' 
....................          60, 124,  64,  64,  60, 124,  64, //'u' 
....................          28,  60,  96,  96,  60,  28,   0, //'v' 
....................          60, 124, 112,  56, 112, 124,  60, //'w' 
....................          68, 108,  56,  16,  56, 108,  68, //'x' 
....................          60, 188, 160, 160, 252, 124,   0, //'y' 
....................          76, 100, 116,  92,  76, 100,   0, //'z' 
....................           8,   8,  62, 119,  65,  65,   0, //'{' 
....................           0,   0,   0, 119, 119,   0,   0, //'|' 
....................          65,  65, 119,  62,   8,   8,   0, //'}' 
....................           2,   3,   1,   3,   2,   3,   1, //'~' 
....................          255, 29, 129,129,  129, 129, 255, //'' 
....................          14, 159, 145, 177, 251,  74,   0  //'ç' 
.................... }; 
....................  
.................... char const Fuente_5_7 [490]={ 
....................                          0x00,0x00,0x00,0x00,0x00,   // 20 space 
....................                   0x00,0x00,0x5f,0x00,0x00,   // 21 ! 
....................                   0x00,0x07,0x00,0x07,0x00,   // 22 " 
....................                   0x14,0x7f,0x14,0x7f,0x14,   // 23 # 
....................                   0x24,0x2a,0x7f,0x2a,0x12,   // 24 $ 
....................                   0x23,0x13,0x08,0x64,0x62,   // 25 % 
....................                   0x36,0x49,0x55,0x22,0x50,   // 26 & 
....................                   0x00,0x05,0x03,0x00,0x00,   // 27 ' 
....................                   0x00,0x1c,0x22,0x41,0x00,   // 28 ( 
....................                   0x00,0x41,0x22,0x1c,0x00,   // 29 ) 
....................                   0x14,0x08,0x3e,0x08,0x14,   // 2a * 
....................                   0x08,0x08,0x3e,0x08,0x08,   // 2b + 
....................                   0x00,0x50,0x30,0x00,0x00,   // 2c , 
....................                   0x08,0x08,0x08,0x08,0x08,   // 2d - 
....................                   0x00,0x60,0x60,0x00,0x00,   // 2e . 
....................                   0x20,0x10,0x08,0x04,0x02,   // 2f / 
....................                   0x3e,0x51,0x49,0x45,0x3e,   // 30 0 
....................                   0x00,0x42,0x7f,0x40,0x00,   // 31 1 
....................                   0x42,0x61,0x51,0x49,0x46,   // 32 2 
....................                   0x21,0x41,0x45,0x4b,0x31,   // 33 3 
....................                   0x18,0x14,0x12,0x7f,0x10,   // 34 4 
....................                   0x27,0x45,0x45,0x45,0x39,   // 35 5 
....................                   0x3c,0x4a,0x49,0x49,0x30,   // 36 6 
....................                   0x01,0x71,0x09,0x05,0x03,   // 37 7 
....................                   0x36,0x49,0x49,0x49,0x36,   // 38 8 
....................                   0x06,0x49,0x49,0x29,0x1e,   // 39 9 
....................                   0x00,0x36,0x36,0x00,0x00,   // 3a : 
....................                   0x00,0x56,0x36,0x00,0x00,   // 3b ; 
....................                   0x08,0x14,0x22,0x41,0x00,   // 3c < 
....................                   0x14,0x14,0x14,0x14,0x14,   // 3d = 
....................                   0x00,0x41,0x22,0x14,0x08,   // 3e > 
....................                   0x02,0x01,0x51,0x09,0x06,   // 3f ? 
....................                   0x32,0x49,0x79,0x41,0x3e,   // 40 @ 
....................                   0x7e,0x11,0x11,0x11,0x7e,   // 41 A 
....................                   0x7f,0x49,0x49,0x49,0x36,   // 42 B 
....................                   0x3e,0x41,0x41,0x41,0x22,   // 43 C 
....................                   0x7f,0x41,0x41,0x22,0x1c,   // 44 D 
....................                   0x7f,0x49,0x49,0x49,0x41,   // 45 E 
....................                   0x7f,0x09,0x09,0x09,0x01,   // 46 F 
....................                   0x3e,0x41,0x49,0x49,0x7a,   // 47 G 
....................                   0x7f,0x08,0x08,0x08,0x7f,   // 48 H 
....................                   0x00,0x41,0x7f,0x41,0x00,   // 49 I 
....................                   0x20,0x40,0x41,0x3f,0x01,   // 4a J 
....................                   0x7f,0x08,0x14,0x22,0x41,   // 4b K 
....................                   0x7f,0x40,0x40,0x40,0x40,   // 4c L 
....................                   0x7f,0x02,0x0c,0x02,0x7f,   // 4d M 
....................                   0x7f,0x04,0x08,0x10,0x7f,   // 4e N 
....................                   0x3e,0x41,0x41,0x41,0x3e,   // 4f O 
....................                         0x7f,0x09,0x09,0x09,0x06,   // 50 P 
....................                   0x3e,0x41,0x51,0x21,0x5e,   // 51 Q 
....................                   0x7f,0x09,0x19,0x29,0x46,   // 52 R 
....................                   0x46,0x49,0x49,0x49,0x31,   // 53 S 
....................                   0x01,0x01,0x7f,0x01,0x01,   // 54 T 
....................                   0x3f,0x40,0x40,0x40,0x3f,   // 55 U 
....................                   0x1f,0x20,0x40,0x20,0x1f,   // 56 V 
....................                   0x3f,0x40,0x38,0x40,0x3f,   // 57 W 
....................                   0x63,0x14,0x08,0x14,0x63,   // 58 X 
....................                   0x07,0x08,0x70,0x08,0x07,   // 59 Y 
....................                   0x61,0x51,0x49,0x45,0x43,   // 5a Z 
....................                   0x00,0x7f,0x41,0x41,0x00,   // 5b [ 
....................                   0x02,0x04,0x08,0x10,0x20,   // 5c 
....................                   0x00,0x41,0x41,0x7f,0x00,   // 5d 
....................                   0x04,0x02,0x01,0x02,0x04,   // 5e 
....................                   0x40,0x40,0x40,0x40,0x40,   // 5f 
....................                   0x00,0x01,0x02,0x04,0x00,   // 60 
....................                   0x20,0x54,0x54,0x54,0x78,   // 61 a 
....................                   0x7f,0x48,0x44,0x44,0x38,   // 62 b 
....................                   0x38,0x44,0x44,0x44,0x20,   // 63 c 
....................                   0x38,0x44,0x44,0x48,0x7f,   // 64 d 
....................                   0x38,0x54,0x54,0x54,0x18,   // 65 e 
....................                   0x08,0x7e,0x09,0x01,0x02,   // 66 f 
....................                   0x0c,0x52,0x52,0x52,0x3e,   // 67 g 
....................                   0x7f,0x08,0x04,0x04,0x78,   // 68 h 
....................                   0x00,0x44,0x7d,0x40,0x00,   // 69 i 
....................                   0x20,0x40,0x44,0x3d,0x00,   // 6a j 
....................                   0x7f,0x10,0x28,0x44,0x00,   // 6b k 
....................                   0x00,0x41,0x7f,0x40,0x00,   // 6c l 
....................                   0x7c,0x04,0x18,0x04,0x78,   // 6d m 
....................                   0x7c,0x08,0x04,0x04,0x78,   // 6e n 
....................                   0x38,0x44,0x44,0x44,0x38,   // 6f o 
....................                   0x7c,0x14,0x14,0x14,0x08,   // 70 p 
....................                   0x08,0x14,0x14,0x18,0x7c,   // 71 q 
....................                   0x7c,0x08,0x04,0x04,0x08,   // 72 r 
....................                   0x48,0x54,0x54,0x54,0x20,   // 73 s 
....................                   0x04,0x3f,0x44,0x40,0x20,   // 74 t 
....................                   0x3c,0x40,0x40,0x20,0x7c,   // 75 u 
....................                   0x1c,0x20,0x40,0x20,0x1c,   // 76 v 
....................                   0x3c,0x40,0x30,0x40,0x3c,   // 77 w 
....................                   0x44,0x28,0x10,0x28,0x44,   // 78 x 
....................                   0x0c,0x50,0x50,0x50,0x3c,   // 79 y 
....................                   0x44,0x64,0x54,0x4c,0x44,   // 7a z 
....................                   0x00,0x08,0x36,0x41,0x00,   // 7b 
....................                   0x00,0x00,0x7f,0x00,0x00,   // 7c 
....................                   0x00,0x41,0x36,0x08,0x00,   // 7d 
....................                   0x10,0x08,0x08,0x10,0x08,   // 7e 
....................                   0x78,0x46,0x41,0x46,0x78,  // 7F 
....................                        0x7C,0x09,0x05,0x05,0x78,  // 80 -> ñ 
....................                        0x7E,0x05,0x09,0x11,0x7E   // 81 -> Ñ 
....................                      };   // 7f   
....................    
.................... float const senos[46] = {0,0.0348,0.0697,0.1045,0.1391,0.1736,0.2079,0.2419, 
....................                   0.2756,0.309,0.342,0.3746,0.4067,0.4383,0.4694,0.5,0.5299, 
....................                   0.5591,0.5877,0.6156,0.6427,0.6691,0.6946,0.7193,0.7431, 
....................                   0.766,0.788,0.809,0.829,0.848,0.866,0.8829,0.8987,0.9135, 
....................                   0.9271,0.9396,0.951,0.9612,0.9702,0.9781,0.9848,0.9902, 
....................                   0.9945,0.9975,0.9993,1}; 
....................  
.................... float const cosenos[46] = {1,0.9993,0.9975,0.9945,0.9902,0.9848,0.9781,0.9702, 
....................                   0.9612,0.951,0.9396,0.9271,0.9135,0.8987,0.8829,0.866, 
....................                   0.848,0.829,0.809,0.788,0.766,0.7431,0.7193,0.6946,0.6691, 
....................                   0.6427,0.6156,0.5877,0.5591,0.5299,0.5,0.4694,0.4383, 
....................                   0.4067,0.3746,0.342,0.309,0.2756,0.2419,0.2079,0.1736, 
....................                   0.1391,0.1045,0.0697,0.0348,0};   
....................    
.................... void nokia_clean_ddram(void); 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... // Envía en serie todos los bits del byte pasado 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void nokia_write_dorc(int8 bytefornokia) 
.................... { 
....................    char caa; 
....................     
....................    for (caa = 0; caa < 8; caa++) 
292A:  MOVLB  4
292C:  CLRF   x1D
292E:  MOVF   x1D,W
2930:  SUBLW  07
2932:  BNC   295C
....................    { 
....................       output_low(Pin_Nok_Sclk); 
2934:  BCF    F92.0
2936:  BCF    F89.0
....................        
....................       delay_us(2); 
2938:  MOVLW  03
293A:  MOVWF  00
293C:  DECFSZ 00,F
293E:  BRA    293C
....................              
....................       if ((bytefornokia & 0b10000000) == 0)  
2940:  MOVF   x1C,W
2942:  ANDLW  80
2944:  BNZ   294C
....................       { 
....................          output_low(Pin_Nok_Sda); 
2946:  BCF    F92.1
2948:  BCF    F89.1
....................       } 
....................       else  
294A:  BRA    2950
....................       { 
....................          output_high(Pin_Nok_sda); 
294C:  BCF    F92.1
294E:  BSF    F89.1
....................       }        
....................        
....................       output_high(Pin_Nok_Sclk); 
2950:  BCF    F92.0
2952:  BSF    F89.0
....................        
....................       bytefornokia <<= 1; 
2954:  BCF    FD8.0
2956:  RLCF   x1C,F
....................    } 
2958:  INCF   x1D,F
295A:  BRA    292E
.................... } 
295C:  MOVLB  0
295E:  RETURN 0
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... // Prepara a la LCD para que guarde el byte en la RAM (para que lo muestre 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void nokia_write_data(int8 bytefornokia_data) 
.................... {    
....................    output_high(Pin_Nok_DC); 
*
2996:  BCF    F92.2
2998:  BSF    F89.2
....................     
....................    output_low(Pin_Nok_CS);    //chip enabled 
299A:  BCF    F92.3
299C:  BCF    F89.3
....................    nokia_write_dorc(bytefornokia_data);   // Rutina que manda en serie los bits 
299E:  MOVFF  419,41C
29A2:  RCALL  292A
....................    output_high(Pin_Nok_CS);   // chip disabled 
29A4:  BCF    F92.3
29A6:  BSF    F89.3
.................... } 
29A8:  RETURN 0
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... // Escribe un comando en el nokia. Para los comandos se activa D/C 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void nokia_write_command(int8 bytefornokia_command) 
.................... { 
....................    output_low(Pin_Nok_DC);   // byte is a command it is read with the eight SCLK pulse 
*
2960:  BCF    F92.2
2962:  BCF    F89.2
....................     
....................    output_low(Pin_Nok_CS);   // chip enabled 
2964:  BCF    F92.3
2966:  BCF    F89.3
....................    nokia_write_dorc(bytefornokia_command); 
2968:  MOVFF  41B,41C
296C:  RCALL  292A
....................    output_high(Pin_Nok_CS);   // chip disabled 
296E:  BCF    F92.3
2970:  BSF    F89.3
.................... } 
2972:  RETURN 0
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... // Escribe en la LCD el caracter pasado 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void nokia_printchar(int8 caracter) 
.................... { 
....................    int8 char_row, chardata; 
....................    int16 charpos; 
....................  
....................    if (caracter == 0xF1) caracter = 0x80; 
....................    else if (caracter == 0xD1) caracter = 0x81; 
....................    else if (caracter == '\f') {nokia_clean_ddram(); return;} 
....................    else if (caracter < 0x20) return; 
....................    else if (caracter > 0x7f) return; 
....................  
....................    for (char_row = 0; char_row < 5; char_row++)    // Son 5 Bytes por caracter Por eso este bucle 
....................    {             
....................       charpos = ((int16)((caracter & 0xFF) - 0x20) * 5) + char_row; 
....................      chardata = ASCII_TABLE[charpos]; 
....................     
....................       nokia_write_data(chardata);                    // Manda el caracter 
....................    } 
....................  
....................    nokia_write_data(0x00);                           // Mandamos 1 espacio Blanco 
.................... } 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... // Posicionamiento en la pantalla 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void nokia_gotoxy(int8 xnokia, int8 ynokia)      // Nokia LCD 3310 Position cursor 
.................... { 
....................       nokia_write_command(0x40 | (ynokia & 0x07));   // Y axe initialisation: 0100 0yyy 
2974:  MOVLB  4
2976:  MOVF   x19,W
2978:  ANDLW  07
297A:  IORLW  40
297C:  MOVWF  x1A
297E:  MOVWF  x1B
2980:  MOVLB  0
2982:  RCALL  2960
....................       nokia_write_command(0x80 | (xnokia & 0x7f));   // X axe initialisation: 1xxx xxxx 
2984:  MOVLB  4
2986:  MOVF   x18,W
2988:  ANDLW  7F
298A:  IORLW  80
298C:  MOVWF  x1A
298E:  MOVWF  x1B
2990:  MOVLB  0
2992:  RCALL  2960
.................... } 
2994:  RETURN 0
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... // Limpiamos la RAM (la pantalla) 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void nokia_borra_pantalla(void) 
.................... { 
....................    int16 ddram;  //cambiar por la del rtc del tio eso 
....................  
....................    nokia_gotoxy(0,0);                  // Vamos al principio 
*
29AA:  MOVLB  4
29AC:  CLRF   x18
29AE:  CLRF   x19
29B0:  MOVLB  0
29B2:  RCALL  2974
....................     
....................    for (ddram = 504; ddram > 0; ddram--) // bucle estableciendo cada byte a 0x00 
29B4:  MOVLW  01
29B6:  MOVLB  4
29B8:  MOVWF  x17
29BA:  MOVLW  F8
29BC:  MOVWF  x16
29BE:  MOVF   x16,F
29C0:  BNZ   29C6
29C2:  MOVF   x17,F
29C4:  BZ    29D8
....................    {    
....................       nokia_write_data(0x00); 
29C6:  CLRF   x19
29C8:  MOVLB  0
29CA:  RCALL  2996
....................    } 
29CC:  MOVLB  4
29CE:  MOVF   x16,W
29D0:  BTFSC  FD8.2
29D2:  DECF   x17,F
29D4:  DECF   x16,F
29D6:  BRA    29BE
.................... } 
29D8:  MOVLB  0
29DA:  RETURN 0
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... // Vuelca la memoria de video sobre la pantalla 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void nokia_imprime_memoria(void) 
.................... { 
.................... int16 ddram;   
....................  
....................    nokia_gotoxy(0,0);                  // Vamos al principio 
*
2D4A:  MOVLB  4
2D4C:  CLRF   x18
2D4E:  CLRF   x19
2D50:  MOVLB  0
2D52:  RCALL  2974
....................    for (ddram=0;ddram<504;ddram++) {    
2D54:  MOVLB  4
2D56:  CLRF   x17
2D58:  CLRF   x16
2D5A:  MOVF   x17,W
2D5C:  SUBLW  01
2D5E:  BNC   2D8A
2D60:  BNZ   2D68
2D62:  MOVF   x16,W
2D64:  SUBLW  F7
2D66:  BNC   2D8A
....................       nokia_write_data(MemoriaVideo[ddram]); 
2D68:  MOVLW  26
2D6A:  ADDWF  x16,W
2D6C:  MOVWF  FE9
2D6E:  MOVLW  00
2D70:  ADDWFC x17,W
2D72:  MOVWF  FEA
2D74:  MOVFF  FEF,418
2D78:  MOVFF  418,419
2D7C:  MOVLB  0
2D7E:  RCALL  2996
....................    } 
2D80:  MOVLB  4
2D82:  INCF   x16,F
2D84:  BTFSC  FD8.2
2D86:  INCF   x17,F
2D88:  BRA    2D5A
.................... } 
2D8A:  MOVLB  0
2D8C:  RETURN 0
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... // Vacía la memoria de video  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void nokia_borra_memoria(void) 
.................... { 
.................... int16 ddram;   
....................    for (ddram=0;ddram<504;ddram++) 
*
2A60:  MOVLB  4
2A62:  CLRF   x17
2A64:  CLRF   x16
2A66:  MOVF   x17,W
2A68:  SUBLW  01
2A6A:  BNC   2A8A
2A6C:  BNZ   2A74
2A6E:  MOVF   x16,W
2A70:  SUBLW  F7
2A72:  BNC   2A8A
....................       MemoriaVideo[ddram]=0; 
2A74:  MOVLW  26
2A76:  ADDWF  x16,W
2A78:  MOVWF  FE9
2A7A:  MOVLW  00
2A7C:  ADDWFC x17,W
2A7E:  MOVWF  FEA
2A80:  CLRF   FEF
2A82:  INCF   x16,F
2A84:  BTFSC  FD8.2
2A86:  INCF   x17,F
2A88:  BRA    2A66
.................... } 
2A8A:  MOVLB  0
2A8C:  RETURN 0
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... // Pinta un punto en la memoria  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void nokia_punto (int8 x, int8 y, int1 color) 
.................... { 
....................    int16 ddram;  
....................     
....................    ddram = x + (((int16)(y / 8) * 84)); 
....................     
....................    if (color) 
....................        MemoriaVideo[ddram] = MemoriaVideo[ddram] | (1 << (y % 8)); 
....................    else 
....................        MemoriaVideo[ddram] = MemoriaVideo[ddram] & (0xFF - (1 << (y % 8))); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... // Pinta una línea en la memoria  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void nokia_linea (int8 x1, int8 y1, int8 x2, int8 y2, int1 color) 
.................... { 
....................    int8 TramoX, TramoY,MenorX,MenorY,MayorX,MayorY,TramoMax,i,xx,yy; 
....................    float OffsetX, OffsetY; 
....................  
....................    if (y1>y2) 
....................       {MenorY=y2;MayorY=y1;OffsetY=-1;} 
....................    else 
....................       {MenorY=y1;MayorY=y2;OffsetY=1;} 
....................  
....................    if (y1==y2) OffsetY=0; 
....................  
....................    if (x1>x2) 
....................       {MenorX=x2;MayorX=x1;OffsetX=-1;} 
....................    else 
....................       {MenorX=x1;MayorX=x2;OffsetX=1;} 
....................  
....................    if (x1==x2) OffsetX=0; 
....................  
....................    TramoX = MayorX-MenorX+1; 
....................    TramoY = MayorY-MenorY+1; 
....................  
....................    if (TramoX>TramoY) 
....................       { 
....................          OffsetY = (float)TramoY / (float)TramoX * OffsetY; 
....................          TramoMax=TramoX; 
....................       } 
....................    else 
....................       { 
....................          OffsetX = (float)TramoX / (float)TramoY * OffsetX; 
....................          TramoMax=TramoY; 
....................       } 
....................  
....................    for (i=0;i<TramoMax;i++) 
....................       { 
....................          xx=x1 + OffsetX * i; 
....................          yy=y1 + OffsetY * i; 
....................          if ((xx<ANCHOPANTALLA) && (yy<ALTOPANTALLA) && (xx>=0) && (yy>=0)) 
....................             nokia_punto (xx,yy, color); 
....................       } 
.................... } 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... // Pinta un rectángulo 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void nokia_rectangulo (int8 x1, int8 y1, int8 x2, int8 y2, int1 estilo, int1 color) 
.................... { 
....................    int16 i; 
....................  
....................    nokia_linea (x1,y1,x2,y1,color); 
....................    nokia_linea (x1,y2,x2,y2,color); 
....................    nokia_linea (x2,y1,x2,y2,color); 
....................    nokia_linea (x1,y1,x1,y2,color); 
....................  
....................    if (estilo) 
....................       if (y1<y2) 
....................          for (i=y1;i<y2;i++) 
....................             nokia_linea (x1,i,x2,i,color); 
....................       else 
....................          for (i=y1;i>y2;i--) 
....................             nokia_linea (x1,i,x2,i,color); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... // Calcula el arcocoseno de un número 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... float arcocoseno(int8 perimetro, int8 radio) 
.................... { 
....................    char j = 45; 
....................     
....................    while ((j > 0) && ((senos[j] * (float)radio) >= perimetro)) 
....................    { 
....................       j--; 
....................    } 
....................     
....................    return (cosenos[j] * (float)radio * 1.16666); // 1.16666 es el factor de correción de la pantalla 
.................... } 
....................           
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... // Pinta un círculo 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void nokia_circulo(int8 x, int8 y, int8 radio, int1 estilo, int1 color) 
.................... { 
....................    int8 i; 
....................    float xx, antxx=0; 
....................  
....................    for (i = (y - radio); i <= y; i++) 
....................    { 
....................       xx = arcocoseno(y - i, radio); 
....................           
....................       if (i > (y - radio)) 
....................       { 
....................          nokia_linea(x + (int8)xx, i, x + (int8)antxx, i - 1, NEGRO); 
....................          nokia_linea(x - (int8)xx, i, x - (int8)antxx, i - 1, NEGRO); 
....................          nokia_linea(x + (int8)xx, 2 * y - 1 - i, x + (int8)antxx, 2 * y - i, NEGRO); 
....................          nokia_linea(x - (int8)xx, 2 * y - 1 - i, x - (int8)antxx, 2 * y - i, NEGRO); 
....................       } 
....................        
....................       if (estilo) 
....................       { 
....................          nokia_linea(x + (int8)xx, i - 1, x - (int8)xx, i - 1, NEGRO); 
....................          nokia_linea(x + (int8)xx, 2 * y - 1 - i, x - (int8)xx, 2 * y - 1 - i, NEGRO); 
....................       } 
....................        
....................       antxx = xx; 
....................    } 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... // Pinta un bitmap 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void nokia_bitmap (signed int8 x, signed int8 y, int8 *bitmap, int8 ancho, int8 alto) 
.................... { 
....................    int16 ind_bitmap, ind_memoria, xx, yy, desplazamiento; 
....................  
....................    for (yy = 0; yy < ((alto >> 3) + ((alto % 8) > 0)); yy++) 
*
2AFE:  MOVLB  4
2B00:  CLRF   x23
2B02:  CLRF   x22
2B04:  RRCF   x1B,W
2B06:  MOVWF  x26
2B08:  RRCF   x26,F
2B0A:  RRCF   x26,F
2B0C:  MOVLW  1F
2B0E:  ANDWF  x26,F
2B10:  MOVF   x1B,W
2B12:  ANDLW  07
2B14:  BNZ   2B1A
2B16:  MOVLW  00
2B18:  BRA    2B1C
2B1A:  MOVLW  01
2B1C:  ADDWF  x26,W
2B1E:  MOVF   x23,F
2B20:  BTFSS  FD8.2
2B22:  BRA    2D46
2B24:  SUBWF  x22,W
2B26:  BTFSC  FD8.0
2B28:  BRA    2D46
....................    { 
....................       for (xx = 0; xx < ancho; xx++) 
2B2A:  CLRF   x21
2B2C:  CLRF   x20
2B2E:  MOVF   x21,F
2B30:  BTFSS  FD8.2
2B32:  BRA    2D3E
2B34:  MOVF   x1A,W
2B36:  SUBWF  x20,W
2B38:  BTFSC  FD8.0
2B3A:  BRA    2D3E
....................       { 
....................          if (((xx + x) < 84) && ((xx + x) > 0)) 
2B3C:  CLRF   03
2B3E:  MOVF   x16,W
2B40:  MOVWF  00
2B42:  BTFSC  FE8.7
2B44:  DECF   03,F
2B46:  ADDWF  x20,W
2B48:  MOVWF  x26
2B4A:  MOVF   03,W
2B4C:  ADDWFC x21,W
2B4E:  MOVWF  x27
2B50:  BTFSC  FE8.7
2B52:  BRA    2B62
2B54:  MOVF   x27,F
2B56:  BTFSS  FD8.2
2B58:  BRA    2D36
2B5A:  MOVF   x26,W
2B5C:  SUBLW  53
2B5E:  BTFSS  FD8.0
2B60:  BRA    2D36
2B62:  CLRF   03
2B64:  MOVF   x16,W
2B66:  MOVWF  00
2B68:  BTFSC  FE8.7
2B6A:  DECF   03,F
2B6C:  ADDWF  x20,W
2B6E:  MOVWF  x26
2B70:  MOVF   03,W
2B72:  ADDWFC x21,W
2B74:  MOVWF  x27
2B76:  BTFSC  FE8.7
2B78:  BRA    2D36
2B7A:  MOVF   x27,F
2B7C:  BNZ   2B86
2B7E:  MOVF   x26,W
2B80:  SUBLW  00
2B82:  BTFSC  FD8.0
2B84:  BRA    2D36
....................          { 
....................             ind_memoria = yy * 84 + xx + x + (int16)(y >> 3) * 84; 
2B86:  MOVFF  423,42B
2B8A:  MOVFF  422,42A
2B8E:  CLRF   x2D
2B90:  MOVLW  54
2B92:  MOVWF  x2C
2B94:  MOVLB  0
2B96:  RCALL  2A8E
2B98:  MOVFF  02,427
2B9C:  MOVFF  01,426
2BA0:  MOVLB  4
2BA2:  MOVF   x20,W
2BA4:  ADDWF  x26,F
2BA6:  MOVF   x21,W
2BA8:  ADDWFC x27,F
2BAA:  CLRF   03
2BAC:  MOVF   x16,W
2BAE:  MOVWF  00
2BB0:  BTFSC  FE8.7
2BB2:  DECF   03,F
2BB4:  ADDWF  x26,F
2BB6:  MOVF   03,W
2BB8:  ADDWFC x27,F
2BBA:  RRCF   x17,W
2BBC:  MOVWF  00
2BBE:  RRCF   00,F
2BC0:  RRCF   00,F
2BC2:  MOVLW  1F
2BC4:  ANDWF  00,F
2BC6:  MOVF   00,W
2BC8:  CLRF   x29
2BCA:  MOVWF  x28
2BCC:  MOVFF  429,42B
2BD0:  MOVWF  x2A
2BD2:  CLRF   x2D
2BD4:  MOVLW  54
2BD6:  MOVWF  x2C
2BD8:  MOVLB  0
2BDA:  RCALL  2A8E
2BDC:  MOVFF  02,03
2BE0:  MOVF   01,W
2BE2:  MOVLB  4
2BE4:  ADDWF  x26,W
2BE6:  MOVWF  01
2BE8:  MOVF   x27,W
2BEA:  ADDWFC 03,F
2BEC:  MOVFF  01,41E
2BF0:  MOVFF  03,41F
....................             ind_bitmap = yy * (int16)ancho + xx; 
2BF4:  CLRF   03
2BF6:  MOVFF  41A,426
2BFA:  MOVFF  03,427
2BFE:  MOVFF  423,42B
2C02:  MOVFF  422,42A
2C06:  MOVFF  03,42D
2C0A:  MOVFF  41A,42C
2C0E:  MOVLB  0
2C10:  RCALL  2A8E
2C12:  MOVLB  4
2C14:  MOVF   x20,W
2C16:  ADDWF  01,W
2C18:  MOVWF  x1C
2C1A:  MOVF   x21,W
2C1C:  ADDWFC 02,W
2C1E:  MOVWF  x1D
....................             desplazamiento = y % 8; 
2C20:  MOVFF  417,426
2C24:  MOVLW  08
2C26:  MOVWF  x27
2C28:  MOVLB  0
2C2A:  BRA    2AB0
2C2C:  MOVF   00,W
2C2E:  CLRF   03
2C30:  MOVLB  4
2C32:  MOVWF  x24
2C34:  MOVFF  03,425
....................             MemoriaVideo[ind_memoria] = MemoriaVideo[ind_memoria] | (bitmap[ind_bitmap] << desplazamiento); 
2C38:  MOVLW  26
2C3A:  ADDWF  x1E,W
2C3C:  MOVWF  01
2C3E:  MOVLW  00
2C40:  ADDWFC x1F,W
2C42:  MOVWF  03
2C44:  MOVFF  01,426
2C48:  MOVWF  x27
2C4A:  MOVLW  26
2C4C:  ADDWF  x1E,W
2C4E:  MOVWF  FE9
2C50:  MOVLW  00
2C52:  ADDWFC x1F,W
2C54:  MOVWF  FEA
2C56:  MOVFF  FEF,428
2C5A:  MOVF   x18,W
2C5C:  ADDWF  x1C,W
2C5E:  MOVWF  FE9
2C60:  MOVF   x19,W
2C62:  ADDWFC x1D,W
2C64:  MOVWF  FEA
2C66:  MOVF   FEF,W
2C68:  CLRF   03
2C6A:  MOVWF  02
2C6C:  MOVF   x24,W
2C6E:  MOVWF  00
2C70:  BZ    2C7C
2C72:  BCF    FD8.0
2C74:  RLCF   02,F
2C76:  RLCF   03,F
2C78:  DECFSZ 00,F
2C7A:  BRA    2C72
2C7C:  MOVF   02,W
2C7E:  IORWF  x28,W
2C80:  MOVFF  427,FEA
2C84:  MOVFF  426,FE9
2C88:  MOVWF  FEF
....................              
....................             if (desplazamiento) 
2C8A:  MOVF   x24,W
2C8C:  IORWF  x25,W
2C8E:  BZ    2D36
....................             { 
....................                MemoriaVideo[ind_memoria + 84] = MemoriaVideo[ind_memoria + 84] | ((bitmap[ind_bitmap] >> (8 - desplazamiento)) & (0xFF >> (8 - desplazamiento))); 
2C90:  MOVLW  54
2C92:  ADDWF  x1E,W
2C94:  MOVWF  x26
2C96:  MOVLW  00
2C98:  ADDWFC x1F,W
2C9A:  MOVWF  x27
2C9C:  MOVLW  26
2C9E:  ADDWF  x26,W
2CA0:  MOVWF  01
2CA2:  MOVLW  00
2CA4:  ADDWFC x27,W
2CA6:  MOVWF  03
2CA8:  MOVFF  01,428
2CAC:  MOVWF  x29
2CAE:  MOVLW  54
2CB0:  ADDWF  x1E,W
2CB2:  MOVWF  x2A
2CB4:  MOVLW  00
2CB6:  ADDWFC x1F,W
2CB8:  MOVWF  x2B
2CBA:  MOVLW  26
2CBC:  ADDWF  x2A,W
2CBE:  MOVWF  FE9
2CC0:  MOVLW  00
2CC2:  ADDWFC x2B,W
2CC4:  MOVWF  FEA
2CC6:  MOVFF  FEF,42C
2CCA:  MOVF   x18,W
2CCC:  ADDWF  x1C,W
2CCE:  MOVWF  FE9
2CD0:  MOVF   x19,W
2CD2:  ADDWFC x1D,W
2CD4:  MOVWF  FEA
2CD6:  MOVFF  FEF,42D
2CDA:  MOVLW  08
2CDC:  BSF    FD8.0
2CDE:  SUBFWB x24,W
2CE0:  MOVWF  00
2CE2:  MOVLW  00
2CE4:  SUBFWB x25,W
2CE6:  MOVWF  03
2CE8:  MOVF   00,W
2CEA:  CLRF   x2E
2CEC:  MOVF   00,F
2CEE:  BZ    2CFA
2CF0:  BCF    FD8.0
2CF2:  RRCF   x2E,F
2CF4:  RRCF   x2D,F
2CF6:  DECFSZ 00,F
2CF8:  BRA    2CF0
2CFA:  MOVLW  08
2CFC:  BSF    FD8.0
2CFE:  SUBFWB x24,W
2D00:  MOVWF  00
2D02:  MOVLW  00
2D04:  SUBFWB x25,W
2D06:  MOVWF  03
2D08:  MOVF   00,W
2D0A:  CLRF   03
2D0C:  MOVLW  FF
2D0E:  MOVWF  02
2D10:  MOVF   00,F
2D12:  BZ    2D1E
2D14:  BCF    FD8.0
2D16:  RRCF   03,F
2D18:  RRCF   02,F
2D1A:  DECFSZ 00,F
2D1C:  BRA    2D14
2D1E:  MOVF   02,W
2D20:  ANDWF  x2D,W
2D22:  MOVWF  00
2D24:  MOVF   03,W
2D26:  ANDWF  x2E,W
2D28:  MOVF   00,W
2D2A:  IORWF  x2C,W
2D2C:  MOVFF  429,FEA
2D30:  MOVFF  428,FE9
2D34:  MOVWF  FEF
....................             } 
....................          } 
....................       } 
2D36:  INCF   x20,F
2D38:  BTFSC  FD8.2
2D3A:  INCF   x21,F
2D3C:  BRA    2B2E
....................    } 
2D3E:  INCF   x22,F
2D40:  BTFSC  FD8.2
2D42:  INCF   x23,F
2D44:  BRA    2B04
.................... } 
2D46:  MOVLB  0
2D48:  RETURN 0
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... // Escribe gráficamente texto en la LCD 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void nokia_texto(signed int8 x, signed int8 y, int8 fuente, char *caracter) 
.................... { 
....................    int16 ind_bitmap, ind_memoria, xx, desplazamiento; 
....................    int8 letra, alto, ancho, EscribirByte; 
....................  
....................    if (fuente == 1) 
....................    { 
....................       ancho = 3;  
....................       alto = 6; 
....................    } 
....................    else if (fuente == 2) 
....................    { 
....................       ancho = 5; 
....................       alto = 7; 
....................    } 
....................    else 
....................    { 
....................       ancho = 7; 
....................       alto = 8; 
....................    } 
....................  
....................    letra = *caracter; 
....................     
....................    while (letra != 0) 
....................    { 
....................       for (xx = 0; xx < ancho; xx++) 
....................       { 
....................          if (((xx + x) < 84) && ((xx + x) >= 0) && (y >= 0)&& (y <= 40)) 
....................          { 
....................             ind_memoria = xx + x + (int16)(y >> 3) * 84; 
....................             ind_bitmap = (int16)(letra - 0x20) * ancho + xx; 
....................             desplazamiento = y % 8; 
....................  
....................             if (fuente == 1) 
....................             {     
....................                EscribirByte = Fuente_3_6[ind_bitmap]; 
....................             } 
....................             else if (fuente == 2) 
....................             { 
....................                EscribirByte = Fuente_5_7[ind_bitmap]; 
....................             } 
....................             else 
....................             { 
....................                EscribirByte = Fuente_7_8[ind_bitmap]; 
....................             } 
....................                     
....................             MemoriaVideo[ind_memoria] = MemoriaVideo[ind_memoria] | (EscribirByte << desplazamiento); 
....................                    
....................             if (desplazamiento) 
....................             { 
....................                MemoriaVideo[ind_memoria + 84] = MemoriaVideo[ind_memoria + 84] | ((EscribirByte >> (8 - desplazamiento)) & (0xFF >> (8 - desplazamiento)));                         
....................             } 
....................          } 
....................       } 
....................              
....................       caracter++; 
....................       letra = *caracter; 
....................       x = x + ancho + 1; 
....................    } 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... // Inicialización de la pantalla 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void Lcd_init(void)  
.................... {    
....................    delay_us(200);       // Pequeño delay de seguridad 
*
29DC:  MOVLW  C8
29DE:  MOVLB  4
29E0:  MOVWF  x16
29E2:  MOVLB  0
29E4:  BRA    28E0
....................     
....................    output_high(Pin_Nok_DC);            // Destino de Bytes -> RAM 
29E6:  BCF    F92.2
29E8:  BSF    F89.2
....................    output_high(Pin_Nok_CS);            // Desactivamos el Driver para que se inicialice 
29EA:  BCF    F92.3
29EC:  BSF    F89.3
....................     
....................    delay_ms(10); 
29EE:  MOVLW  0A
29F0:  MOVLB  4
29F2:  MOVWF  x17
29F4:  MOVLB  0
29F6:  RCALL  2902
....................     
....................    output_low(Pin_Nok_Res);            // Y damos un pulso de reset según indica el datasheet    
29F8:  BCF    F92.4
29FA:  BCF    F89.4
....................    delay_ms(250);         // durante 1us.   
29FC:  MOVLW  FA
29FE:  MOVLB  4
2A00:  MOVWF  x17
2A02:  MOVLB  0
2A04:  RCALL  2902
....................    output_high(Pin_Nok_Res); 
2A06:  BCF    F92.4
2A08:  BSF    F89.4
....................     
....................    nokia_write_command(0b00100001);   // Activamos los comandos extendidos 
2A0A:  MOVLW  21
2A0C:  MOVLB  4
2A0E:  MOVWF  x1B
2A10:  MOVLB  0
2A12:  RCALL  2960
....................    nokia_write_command(0x90);   // Definimos el Vop. Establecerá la tensión interna del cristal (su contraste) 
2A14:  MOVLW  90
2A16:  MOVLB  4
2A18:  MOVWF  x1B
2A1A:  MOVLB  0
2A1C:  RCALL  2960
....................    nokia_write_command(0x13);   // bias 13. Min 10 Max 17 
2A1E:  MOVLW  13
2A20:  MOVLB  4
2A22:  MOVWF  x1B
2A24:  MOVLB  0
2A26:  RCALL  2960
....................    nokia_write_command(0b00100000);    // Modo horizontal, de izq. a dcha. Se incrementa la posición automáticamente 
2A28:  MOVLW  20
2A2A:  MOVLB  4
2A2C:  MOVWF  x1B
2A2E:  MOVLB  0
2A30:  RCALL  2960
....................    nokia_write_command(0x09);   // all on 
2A32:  MOVLW  09
2A34:  MOVLB  4
2A36:  MOVWF  x1B
2A38:  MOVLB  0
2A3A:  RCALL  2960
....................     
....................    delay_ms(50); 
2A3C:  MOVLW  32
2A3E:  MOVLB  4
2A40:  MOVWF  x17
2A42:  MOVLB  0
2A44:  RCALL  2902
....................     
....................    nokia_borra_pantalla();        // Limpiamos la RAM para que no haya basura en la LCD 
2A46:  RCALL  29AA
....................     
....................    delay_ms(10); 
2A48:  MOVLW  0A
2A4A:  MOVLB  4
2A4C:  MOVWF  x17
2A4E:  MOVLB  0
2A50:  RCALL  2902
....................     
....................    nokia_write_command(0b00001100);   // mod control normal change 
2A52:  MOVLW  0C
2A54:  MOVLB  4
2A56:  MOVWF  x1B
2A58:  MOVLB  0
2A5A:  RCALL  2960
.................... } 
2A5C:  GOTO   2DB6 (RETURN)
....................  
....................  
.................... char const OK [] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0x60, 0x70, 0xB0, 0xD8, 
.................... 0xD8, 0xD8, 0xD8, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF8, 0x1E, 0x0F, 0x07, 0x01, 0x38, 0x3E, 
.................... 0x0F, 0x03, 0x01, 0x00, 0x00, 0xC0, 0xFF, 0x7F, 0x07, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xCF, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x80, 0x80, 0xC0, 0xE0, 0x70, 0x3C, 0x0F, 0x87, 0xE1, 0xF8, 0xFE, 0xCF, 0x61, 0x70, 0x38, 
.................... 0x1C, 0x0E, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 
.................... 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0xC0, 0xFC, 0x3E, 0x7F, 0xE3, 0xC1, 0x01, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x3C, 0x1F, 0x07, 0x01, 0x00, 0x00, 0x01, 
.................... 0x03, 0x07, 0x0E, 0x1C, 0x38, 0x30, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
.................... }; 
....................  
.................... const unsigned char image[504] = {0xFF, 0xFF, 0xFF, 0x23, 0x23, 0x23, 0x1B, 0x1B, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03,  
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xF8, 0xF8,  
.................... 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
....................  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xE0, 0xE0, 0xE0, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 
....................  0xE0, 0xE0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80,  
....................  0x80, 0xF0, 0xF0, 0xF0, 0xF8, 0xF8, 0x0E, 0x0E, 0x0E, 0x07, 0x07, 0x01, 0x01, 0x01, 0xF0, 0xF0, 0xF0, 0xF8, 0xF8, 0x7F,  
....................  0x7F, 0x7F, 0x07, 0x07, 0x07, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,  
....................  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x07, 0x07, 0x07, 0x0F, 
....................  0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
....................  0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF,  
....................  0xFF, 0xFF, 0xFF, 0xE0, 0xE0, 0xE0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x1C, 0x1C, 0x1C, 0x7E, 0x7E, 0x1F, 0x1F, 0x1F, 0x0E, 
....................  0x0E, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x1C, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC, 0x70, 0x70, 0x70, 
....................  0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xFE, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
....................  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xE3,  
....................  0xE3, 0xE3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8,  
....................  0xE0, 0xE0, 0xE0, 0xC7, 0xC7, 0xC7, 0x1F, 0x1F, 0xC7, 0xC7, 0xC7, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xF8, 0xF8, 0xF8, 0xF8,  
....................  0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00,  
....................  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x3F, 0x3F, 0x7F, 0x7F,  
....................  0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x7F, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  
....................  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0x87, 0x01, 0x01, 0x01, 0xF0, 0xF0, 0xF0, 0xFF, 0xFF,  
....................  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x3F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00,  
....................  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
....................  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,  
....................  0x01, 0x03, 0x03, 0x0F, 0x0F, 0x0F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1C, 0x1C, 0x1C, 0x01,  
....................  0x01, 0x01, 0x03, 0x03, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  
....................  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; 
....................  
.................... const unsigned char lol[504] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0x20, 0x20, 0x10, 0x10, 0x10, 0xC8, 0xC8, 0xE8, 0xE8, 0x24, 0x24, 0x24, 0x24, 0x24, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x14, 0x14, 0x14, 0x18, 0x18, 0x18, 0x18, 0xD8, 0xD8, 0xD8, 0x30, 0x30, 0x30, 0x30, 0x30, 0xF0, 0xF0, 0xF0, 0xF0, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0x06, 0x06, 0x01, 0x01, 0x02, 0x02, 0x02, 0x03, 0x03, 0x01, 0x01, 0x01, 0x31, 0x31, 0x46, 0x46, 0x81, 0x81, 0x81, 0x79, 0x79, 0x38, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00, 0x81, 0x81, 0x81, 0x83, 0x83, 0x3C, 0x3C, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x3C, 0x3C, 0x41, 0x41, 0x40, 0x40, 0xC0, 0xC0, 0xC0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x43, 0x43, 0x71, 0x71, 0x8F, 0x8F, 0x8F, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x81, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x72, 0x72, 0x1E, 0x1E, 0x03, 0x03, 0xF0, 0xF0, 0xF0, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x31, 0x31, 0x32, 0x32, 0x3E, 0x3E, 0x3E, 0x41, 0x41, 0xEE, 0xEE, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0xE0, 0xE0, 0x1F, 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xF8, 0x07, 0x07, 0x07, 0x18, 0x18, 0xC3, 0xC3, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0C, 0x0C, 0x0C, 0x70, 0x70, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x30, 0x30, 0x40, 0x40, 0x40, 0xC0, 0xC0, 0x07, 0x07, 0x07, 0x00, 0x00, 0x7F, 0x7F, 0xC8, 0xC8, 0xC8, 0x48, 0x48, 0x79, 0x79, 0x79, 0x7A, 0x7A, 0xC8, 0xC8, 0x0F, 0x0F, 0x0F, 0x80, 0x80, 0x7F, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x30, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x43, 0x43, 0x6C, 0x6C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0C, 0x0C, 0x0C, 0x0C, 0x02, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; 
....................  
.................... const unsigned char mejor[504] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x60, 0x7C, 0x7C, 0x7C, 0x7E, 0x7E, 0x7E, 0x7F, 0x7F, 0x7D, 0x7D, 0x7D, 0x70, 0x70, 0x70, 0x7D, 0x7D, 0x7D, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x70, 0x70, 0x70, 0x7D, 0x7D, 0x7F, 0x7F, 0x7F, 0x7E, 0x7E, 0x7E, 0x7C, 0x7C, 0x7C, 0x70, 0x70, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x7F, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; 
....................   
.................... const unsigned char far[504] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xF0, 0xF0, 0xF8, 0xF8, 0x04, 0x04, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xFC, 0xFC, 0xFC, 0xFC, 0x0F, 0x0F, 0x03, 0x03, 0x03, 0xF0, 0xF0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xE0, 0xF0, 0xF0, 0xF8, 0xF8, 0xF8, 0xF8, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0xEF, 0xE1, 0xE1, 0xF0, 0xF0, 0xF0, 0x3E, 0x3E, 0x07, 0x07, 0xE0, 0xE0, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x1F, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x1F, 0x00, 0x00, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0xC7, 0xC7, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xDF, 0xDF, 0xE3, 0xE3, 0xE1, 0xE1, 0xFC, 0xFC, 0xFF, 0xFF, 0x3F, 0x3F, 0x3F, 0x1F, 0x1F, 0x03, 0x03, 0x80, 0x80, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xF8, 0xF8, 0x7E, 0x7E, 0x1F, 0x1F, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x7C, 0x7C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0x30, 0x30, 0x38, 0x38, 0x1E, 0x1E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x38, 0x38, 0x3C, 0x3C, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x07, 0x07, 0x06, 0x06, 0x06, 0x06, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };  
....................  
.................... void main(void) 
.................... { 
*
2D8E:  CLRF   FF8
2D90:  BCF    FD0.7
2D92:  CLRF   FEA
2D94:  CLRF   FE9
2D96:  BSF    FB8.3
2D98:  MOVLW  56
2D9A:  MOVWF  FAF
2D9C:  MOVLW  00
2D9E:  MOVWF  FB0
2DA0:  MOVLW  A6
2DA2:  MOVWF  FAC
2DA4:  MOVLW  90
2DA6:  MOVWF  FAB
2DA8:  MOVF   FC1,W
2DAA:  ANDLW  C0
2DAC:  IORLW  0F
2DAE:  MOVWF  FC1
2DB0:  MOVLW  07
2DB2:  MOVWF  FB4
....................    int8 Temp[504];  
....................     
....................  lcd_init();             // Inicialización LCD 
2DB4:  BRA    29DC
....................    nokia_borra_pantalla();    // La limpiamos (por si acaso) 
2DB6:  RCALL  29AA
....................     
....................    delay_ms(300);      
2DB8:  MOVLW  02
2DBA:  MOVLB  4
2DBC:  MOVWF  x16
2DBE:  MOVLW  96
2DC0:  MOVWF  x17
2DC2:  MOVLB  0
2DC4:  RCALL  2902
2DC6:  MOVLB  4
2DC8:  DECFSZ x16,F
2DCA:  BRA    2DBE
....................        
....................    while(true) { 
....................       
....................       nokia_borra_memoria(); 
2DCC:  MOVLB  0
2DCE:  RCALL  2A60
....................       delay_ms(500); 
2DD0:  MOVLW  02
2DD2:  MOVLB  4
2DD4:  MOVWF  x16
2DD6:  MOVLW  FA
2DD8:  MOVWF  x17
2DDA:  MOVLB  0
2DDC:  RCALL  2902
2DDE:  MOVLB  4
2DE0:  DECFSZ x16,F
2DE2:  BRA    2DD6
....................       memcpy(Temp, OK, sizeof(OK)); 
2DE4:  MOVLW  02
2DE6:  MOVWF  FEA
2DE8:  MOVLW  1E
2DEA:  MOVWF  FE9
2DEC:  MOVLW  AF
2DEE:  MOVWF  01
2DF0:  CLRF   FF7
2DF2:  MOVLW  00
2DF4:  MOVLB  0
2DF6:  CALL   2008
2DFA:  TBLRD*-
2DFC:  TBLRD*+
2DFE:  MOVFF  FF5,FEE
2E02:  DECFSZ 01,F
2E04:  BRA    2DFC
....................       nokia_bitmap(25, 3, Temp, 35, 40);  
2E06:  MOVLW  19
2E08:  MOVLB  4
2E0A:  MOVWF  x16
2E0C:  MOVLW  03
2E0E:  MOVWF  x17
2E10:  MOVLW  02
2E12:  MOVWF  x19
2E14:  MOVLW  1E
2E16:  MOVWF  x18
2E18:  MOVLW  23
2E1A:  MOVWF  x1A
2E1C:  MOVLW  28
2E1E:  MOVWF  x1B
2E20:  MOVLB  0
2E22:  RCALL  2AFE
....................       nokia_imprime_memoria(); 
2E24:  RCALL  2D4A
.................... delay_ms(2000); 
2E26:  MOVLW  08
2E28:  MOVLB  4
2E2A:  MOVWF  x16
2E2C:  MOVLW  FA
2E2E:  MOVWF  x17
2E30:  MOVLB  0
2E32:  RCALL  2902
2E34:  MOVLB  4
2E36:  DECFSZ x16,F
2E38:  BRA    2E2C
....................     
....................       nokia_borra_memoria(); 
2E3A:  MOVLB  0
2E3C:  RCALL  2A60
....................          delay_ms(1000); 
2E3E:  MOVLW  04
2E40:  MOVLB  4
2E42:  MOVWF  x16
2E44:  MOVLW  FA
2E46:  MOVWF  x17
2E48:  MOVLB  0
2E4A:  RCALL  2902
2E4C:  MOVLB  4
2E4E:  DECFSZ x16,F
2E50:  BRA    2E44
....................           
....................           nokia_borra_memoria(); 
2E52:  MOVLB  0
2E54:  RCALL  2A60
....................       delay_ms(500); 
2E56:  MOVLW  02
2E58:  MOVLB  4
2E5A:  MOVWF  x16
2E5C:  MOVLW  FA
2E5E:  MOVWF  x17
2E60:  MOVLB  0
2E62:  RCALL  2902
2E64:  MOVLB  4
2E66:  DECFSZ x16,F
2E68:  BRA    2E5C
....................       memcpy(Temp, image, sizeof(image)); 
2E6A:  MOVLW  02
2E6C:  MOVWF  FEA
2E6E:  MOVLW  1E
2E70:  MOVWF  FE9
2E72:  MOVLW  02
2E74:  MOVWF  02
2E76:  MOVLW  F8
2E78:  MOVWF  01
2E7A:  CLRF   FF7
2E7C:  MOVLW  00
2E7E:  MOVLB  0
2E80:  CALL   20C8
2E84:  TBLRD*-
2E86:  TBLRD*+
2E88:  CLRF   FEF
2E8A:  MOVFF  FF5,FEE
2E8E:  DECFSZ 01,F
2E90:  BRA    2E86
2E92:  DECFSZ 02,F
2E94:  BRA    2E86
....................       nokia_bitmap(0, 0, Temp, 84, 43);  
2E96:  MOVLB  4
2E98:  CLRF   x16
2E9A:  CLRF   x17
2E9C:  MOVLW  02
2E9E:  MOVWF  x19
2EA0:  MOVLW  1E
2EA2:  MOVWF  x18
2EA4:  MOVLW  54
2EA6:  MOVWF  x1A
2EA8:  MOVLW  2B
2EAA:  MOVWF  x1B
2EAC:  MOVLB  0
2EAE:  RCALL  2AFE
....................       nokia_imprime_memoria(); 
2EB0:  RCALL  2D4A
.................... delay_ms(2000); 
2EB2:  MOVLW  08
2EB4:  MOVLB  4
2EB6:  MOVWF  x16
2EB8:  MOVLW  FA
2EBA:  MOVWF  x17
2EBC:  MOVLB  0
2EBE:  RCALL  2902
2EC0:  MOVLB  4
2EC2:  DECFSZ x16,F
2EC4:  BRA    2EB8
....................     
....................       nokia_borra_memoria(); 
2EC6:  MOVLB  0
2EC8:  RCALL  2A60
....................          delay_ms(1000); 
2ECA:  MOVLW  04
2ECC:  MOVLB  4
2ECE:  MOVWF  x16
2ED0:  MOVLW  FA
2ED2:  MOVWF  x17
2ED4:  MOVLB  0
2ED6:  RCALL  2902
2ED8:  MOVLB  4
2EDA:  DECFSZ x16,F
2EDC:  BRA    2ED0
....................           
....................          nokia_borra_memoria(); 
2EDE:  MOVLB  0
2EE0:  RCALL  2A60
....................       delay_ms(500); 
2EE2:  MOVLW  02
2EE4:  MOVLB  4
2EE6:  MOVWF  x16
2EE8:  MOVLW  FA
2EEA:  MOVWF  x17
2EEC:  MOVLB  0
2EEE:  RCALL  2902
2EF0:  MOVLB  4
2EF2:  DECFSZ x16,F
2EF4:  BRA    2EE8
....................       memcpy(Temp, lol, sizeof(lol)); 
2EF6:  MOVLW  02
2EF8:  MOVWF  FEA
2EFA:  MOVLW  1E
2EFC:  MOVWF  FE9
2EFE:  MOVLW  02
2F00:  MOVWF  02
2F02:  MOVLW  F8
2F04:  MOVWF  01
2F06:  CLRF   FF7
2F08:  MOVLW  00
2F0A:  MOVLB  0
2F0C:  CALL   22CE
2F10:  TBLRD*-
2F12:  TBLRD*+
2F14:  CLRF   FEF
2F16:  MOVFF  FF5,FEE
2F1A:  DECFSZ 01,F
2F1C:  BRA    2F12
2F1E:  DECFSZ 02,F
2F20:  BRA    2F12
....................       nokia_bitmap(0, 0, Temp, 84, 43);  
2F22:  MOVLB  4
2F24:  CLRF   x16
2F26:  CLRF   x17
2F28:  MOVLW  02
2F2A:  MOVWF  x19
2F2C:  MOVLW  1E
2F2E:  MOVWF  x18
2F30:  MOVLW  54
2F32:  MOVWF  x1A
2F34:  MOVLW  2B
2F36:  MOVWF  x1B
2F38:  MOVLB  0
2F3A:  RCALL  2AFE
....................       nokia_imprime_memoria(); 
2F3C:  RCALL  2D4A
.................... delay_ms(2000); 
2F3E:  MOVLW  08
2F40:  MOVLB  4
2F42:  MOVWF  x16
2F44:  MOVLW  FA
2F46:  MOVWF  x17
2F48:  MOVLB  0
2F4A:  RCALL  2902
2F4C:  MOVLB  4
2F4E:  DECFSZ x16,F
2F50:  BRA    2F44
....................     
....................       nokia_borra_memoria(); 
2F52:  MOVLB  0
2F54:  RCALL  2A60
....................          delay_ms(1000); 
2F56:  MOVLW  04
2F58:  MOVLB  4
2F5A:  MOVWF  x16
2F5C:  MOVLW  FA
2F5E:  MOVWF  x17
2F60:  MOVLB  0
2F62:  RCALL  2902
2F64:  MOVLB  4
2F66:  DECFSZ x16,F
2F68:  BRA    2F5C
....................           
....................          nokia_borra_memoria(); 
2F6A:  MOVLB  0
2F6C:  RCALL  2A60
....................       delay_ms(500); 
2F6E:  MOVLW  02
2F70:  MOVLB  4
2F72:  MOVWF  x16
2F74:  MOVLW  FA
2F76:  MOVWF  x17
2F78:  MOVLB  0
2F7A:  RCALL  2902
2F7C:  MOVLB  4
2F7E:  DECFSZ x16,F
2F80:  BRA    2F74
....................       memcpy(Temp, mejor, sizeof(mejor)); 
2F82:  MOVLW  02
2F84:  MOVWF  FEA
2F86:  MOVLW  1E
2F88:  MOVWF  FE9
2F8A:  MOVLW  02
2F8C:  MOVWF  02
2F8E:  MOVLW  F8
2F90:  MOVWF  01
2F92:  CLRF   FF7
2F94:  MOVLW  00
2F96:  MOVLB  0
2F98:  CALL   24D4
2F9C:  TBLRD*-
2F9E:  TBLRD*+
2FA0:  CLRF   FEF
2FA2:  MOVFF  FF5,FEE
2FA6:  DECFSZ 01,F
2FA8:  BRA    2F9E
2FAA:  DECFSZ 02,F
2FAC:  BRA    2F9E
....................       nokia_bitmap(0, 0, Temp, 84, 43);  
2FAE:  MOVLB  4
2FB0:  CLRF   x16
2FB2:  CLRF   x17
2FB4:  MOVLW  02
2FB6:  MOVWF  x19
2FB8:  MOVLW  1E
2FBA:  MOVWF  x18
2FBC:  MOVLW  54
2FBE:  MOVWF  x1A
2FC0:  MOVLW  2B
2FC2:  MOVWF  x1B
2FC4:  MOVLB  0
2FC6:  RCALL  2AFE
....................       nokia_imprime_memoria(); 
2FC8:  RCALL  2D4A
.................... delay_ms(2000); 
2FCA:  MOVLW  08
2FCC:  MOVLB  4
2FCE:  MOVWF  x16
2FD0:  MOVLW  FA
2FD2:  MOVWF  x17
2FD4:  MOVLB  0
2FD6:  RCALL  2902
2FD8:  MOVLB  4
2FDA:  DECFSZ x16,F
2FDC:  BRA    2FD0
....................     
....................       nokia_borra_memoria(); 
2FDE:  MOVLB  0
2FE0:  RCALL  2A60
....................          delay_ms(1000); 
2FE2:  MOVLW  04
2FE4:  MOVLB  4
2FE6:  MOVWF  x16
2FE8:  MOVLW  FA
2FEA:  MOVWF  x17
2FEC:  MOVLB  0
2FEE:  RCALL  2902
2FF0:  MOVLB  4
2FF2:  DECFSZ x16,F
2FF4:  BRA    2FE8
....................      
....................      nokia_borra_memoria(); 
2FF6:  MOVLB  0
2FF8:  RCALL  2A60
....................       delay_ms(500); 
2FFA:  MOVLW  02
2FFC:  MOVLB  4
2FFE:  MOVWF  x16
3000:  MOVLW  FA
3002:  MOVWF  x17
3004:  MOVLB  0
3006:  RCALL  2902
3008:  MOVLB  4
300A:  DECFSZ x16,F
300C:  BRA    3000
....................       memcpy(Temp, far, sizeof(far)); 
300E:  MOVLW  02
3010:  MOVWF  FEA
3012:  MOVLW  1E
3014:  MOVWF  FE9
3016:  MOVLW  02
3018:  MOVWF  02
301A:  MOVLW  F8
301C:  MOVWF  01
301E:  CLRF   FF7
3020:  MOVLW  00
3022:  MOVLB  0
3024:  CALL   26DA
3028:  TBLRD*-
302A:  TBLRD*+
302C:  CLRF   FEF
302E:  MOVFF  FF5,FEE
3032:  DECFSZ 01,F
3034:  BRA    302A
3036:  DECFSZ 02,F
3038:  BRA    302A
....................       nokia_bitmap(0, 0, Temp, 84, 43);  
303A:  MOVLB  4
303C:  CLRF   x16
303E:  CLRF   x17
3040:  MOVLW  02
3042:  MOVWF  x19
3044:  MOVLW  1E
3046:  MOVWF  x18
3048:  MOVLW  54
304A:  MOVWF  x1A
304C:  MOVLW  2B
304E:  MOVWF  x1B
3050:  MOVLB  0
3052:  RCALL  2AFE
....................       nokia_imprime_memoria(); 
3054:  RCALL  2D4A
.................... delay_ms(2000); 
3056:  MOVLW  08
3058:  MOVLB  4
305A:  MOVWF  x16
305C:  MOVLW  FA
305E:  MOVWF  x17
3060:  MOVLB  0
3062:  RCALL  2902
3064:  MOVLB  4
3066:  DECFSZ x16,F
3068:  BRA    305C
....................     
....................       nokia_borra_memoria(); 
306A:  MOVLB  0
306C:  RCALL  2A60
....................          delay_ms(1000); 
306E:  MOVLW  04
3070:  MOVLB  4
3072:  MOVWF  x16
3074:  MOVLW  FA
3076:  MOVWF  x17
3078:  MOVLB  0
307A:  RCALL  2902
307C:  MOVLB  4
307E:  DECFSZ x16,F
3080:  BRA    3074
....................    } 
3082:  BRA    2DCC
.................... } 
3084:  SLEEP 

Configuration Fuses:
   Word  1: CE24   PLL5 CPUDIV1 USBDIV HSPLL FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV20 VREGEN NOWDT WDT32768
   Word  3: 8500   CCP2C1 NOPBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
