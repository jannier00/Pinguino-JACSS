CCS PCH C Compiler, Version 4.120, 5967               22-sep-15 12:40

               Filename: E:\Pinguino JACSS\Ejemplos\4_LCD\LCDPORTB\LCDHolamundo.lst

               ROM used: 694 bytes (2%)
                         Largest free fragment is 23878
               RAM used: 5 (0%) at main() level
                         18 (1%) worst case
               Stack:    6 locations

*
2000:  GOTO   2282
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... /// PROGRAMA PARA VISUALIZAR DATOS EN LA LCD USANDO LA LIBREIRA   lcd.h      /// 
.................... ///     LCD_ENABLE_PIN   PIN_B0                                              /// 
.................... ///     LCD_RS_PIN       PIN_B1                                              /// 
.................... ///     LCD_RW_PIN       PIN_B2     //CONEXION PANTALLA PUERTO B             /// 
.................... ///     LCD_DATA4        PIN_B4                                              /// 
.................... ///     LCD_DATA5        PIN_B5                                              /// 
.................... ///     LCD_DATA6        PIN_B6                                              /// 
.................... ///     LCD_DATA7        PIN_B7                                              /// 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... //#device adc = 10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV1,VREGEN,NOPBADEN 
.................... #use delay(clock=48000000)  //#use delay(clock=20000000) 
*
2028:  CLRF   FEA
202A:  MOVLW  08
202C:  MOVWF  FE9
202E:  MOVF   FEF,W
2030:  BZ    204E
2032:  MOVLW  0F
2034:  MOVWF  01
2036:  CLRF   00
2038:  DECFSZ 00,F
203A:  BRA    2038
203C:  DECFSZ 01,F
203E:  BRA    2036
2040:  MOVLW  8F
2042:  MOVWF  00
2044:  DECFSZ 00,F
2046:  BRA    2044
2048:  NOP   
204A:  DECFSZ FEF,F
204C:  BRA    2032
204E:  RETURN 0
.................... #include <usb/usb_bootloader.h> //Comenta esta línea si no usas Bootloader 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                     USB_BOOTLOADER.H                              //// 
.................... ////                                                                   //// 
.................... ////  This include file must be included by any application loaded     //// 
.................... ////  by the example USB bootloader (ex_usb_bootloader                 //// 
.................... ////                                                                   //// 
.................... ////  The directives in this file relocate the reset and interrupt     //// 
.................... ////  vectors as well as reserving space for the bootloader.           //// 
.................... ////                                                                   //// 
.................... ////  For more documentation see ex_usb_bootloader.c                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// VERSION HISTORY                                                   //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... //how big is the bootloader? 
.................... //the bootloader will reside from address 0x0000 to this location.  the 
.................... //application will then sit at this location+1 to the end of program memory. 
.................... //#if defined(__DEBUG) 
.................... #define LOADER_SIZE        (0x1FFF) 
.................... //#else 
.................... //#define LOADER_SIZE        (0x17FF) 
.................... //#endif 
....................  
.................... //the loader and application need a common flag that determines if we are in 
.................... //the bootloader or application, that way the ISR knows where to go.  this 
.................... //is the location in ram that is reserved for this flag. 
.................... #define LOC_IN_LOADER_FLAG  0x25 
....................  
.................... //// --- end configuration --- //////////////////////////////////////////// 
....................  
.................... #reserve LOC_IN_LOADER_FLAG 
....................  
.................... int8 g_InBootloader; 
.................... #locate g_InBootloader=LOC_IN_LOADER_FLAG 
....................  
.................... #define LOADER_START       (0) 
.................... #define LOADER_END         (LOADER_SIZE) 
.................... #define APPLICATION_START  (LOADER_SIZE+1) 
.................... #if defined(__USB_87J50__) 
....................  #define APPLICATION_END    (getenv("PROGRAM_MEMORY")-9) //configuration bits 
.................... #else 
....................  #define APPLICATION_END    (getenv("PROGRAM_MEMORY")-1) 
.................... #endif  
.................... #define APPLICATION_ISR    (APPLICATION_START+8) 
....................  
.................... #ifdef _bootloader 
....................  /* 
....................   Provide an empty application, so if you load this .HEX file into the pic 
....................   without an application this will prevent the pic from executing unknown code. 
....................  */ 
....................  #org APPLICATION_START,APPLICATION_START+0xF 
....................  void BlankApplication(void)  
....................  { 
....................    while(TRUE); 
....................  } 
....................  
....................  //we need to prevent the loader from using application space 
....................  #if (APPLICATION_END > 0x10000) 
....................    #org APPLICATION_START+0x10, 0xFFFF {} 
....................    #if (APPLICATION_END > 0x20000) 
....................       #org 0x10000, 0x1FFFF {} 
....................       #org 0x20000, APPLICATION_END {} 
....................    #else 
....................       #org 0x10000, APPLICATION_END {} 
....................    #endif 
....................  #else 
....................    #org APPLICATION_START+0x10, APPLICATION_END {} 
....................  #endif 
....................  
....................    #define  USB_CONFIG_VID       0x04D8 
....................     
....................    #define  USB_CONFIG_PID       0x0002 
....................  
....................    #define USB_STRINGS_OVERWRITTEN 
....................    char USB_STRING_DESC_OFFSET[]={0,4,12}; 
....................  
....................    // Here is where the "CCS" Manufacturer string and "SERIAL DEMO" are stored. 
....................    // Strings are saved as unicode. 
....................    // These strings are mostly only displayed during the add hardware wizard. 
....................    // Once the operating system drivers have been installed it will usually display 
....................    // the name from the drivers .INF. 
....................    char const USB_STRING_DESC[]={ 
....................       //string 0 
....................             4, //length of string index 
....................             0x03, //USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................             0x09,0x04,   //Microsoft Defined for US-English 
....................       //string 1  - manufacturer 
....................             12, //length of string index 
....................             0x03, //USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................             'P',0, 
....................             'I',0, 
....................             'N',0, 
....................             'G',0, 
....................             'U',0, 
....................             'I',0, 
....................             'N',0, 
....................             'O',0, 
....................       //string 2 - product 
....................             24, //length of string index 
....................             0x03, //USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................             'P',0, 
....................             'I',0, 
....................             'N',0, 
....................             'G',0, 
....................             'U',0, 
....................             'I',0, 
....................             'N',0, 
....................             'O',0, 
....................             ' ',0, 
....................             'J',0, 
....................             'A',0, 
....................             'C',0, 
....................             'S',0, 
....................             'S',0, 
....................    }; 
.................... #endif   //_bootloader 
....................  
.................... #ifndef _bootloader 
....................  #define  USB_CONFIG_VID       0x04D8 
....................  #define  USB_CONFIG_PID       0x0002 
....................  //in the application, this moves the reset and isr vector out of the bootload 
....................  //space.  it then reserves the loader space from being used by the application. 
....................  #build(reset=APPLICATION_START, interrupt=APPLICATION_ISR) 
....................  #org 0, LOADER_END {} 
.................... #endif 
....................  
.................... #include <lcd.c>  
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... #define LCD_ENABLE_PIN  PIN_B0                                  
.................... #define LCD_RS_PIN      PIN_B1                                  
.................... #define LCD_RW_PIN      PIN_B2                                 
.................... #define LCD_DATA4       PIN_B4                                   
.................... #define LCD_DATA5       PIN_B5                                  
.................... #define LCD_DATA6       PIN_B6                               
.................... #define LCD_DATA7       PIN_B7     
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
20E8:  BSF    F93.4
....................    output_float(LCD_DATA5); 
20EA:  BSF    F93.5
....................    output_float(LCD_DATA6); 
20EC:  BSF    F93.6
....................    output_float(LCD_DATA7); 
20EE:  BSF    F93.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
20F0:  BSF    F8A.2
20F2:  BCF    F93.2
....................    delay_cycles(1); 
20F4:  NOP   
....................    lcd_output_enable(1); 
20F6:  BSF    F8A.0
20F8:  BCF    F93.0
....................    delay_cycles(1); 
20FA:  NOP   
....................    high = lcd_read_nibble(); 
20FC:  RCALL  2096
20FE:  MOVFF  01,0F
....................        
....................    lcd_output_enable(0); 
2102:  BCF    F8A.0
2104:  BCF    F93.0
....................    delay_cycles(1); 
2106:  NOP   
....................    lcd_output_enable(1); 
2108:  BSF    F8A.0
210A:  BCF    F93.0
....................    delay_us(1); 
210C:  MOVLW  03
210E:  MOVWF  00
2110:  DECFSZ 00,F
2112:  BRA    2110
2114:  BRA    2116
....................    low = lcd_read_nibble(); 
2116:  RCALL  2096
2118:  MOVFF  01,0E
....................        
....................    lcd_output_enable(0); 
211C:  BCF    F8A.0
211E:  BCF    F93.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
2120:  BCF    F93.4
....................    output_drive(LCD_DATA5); 
2122:  BCF    F93.5
....................    output_drive(LCD_DATA6); 
2124:  BCF    F93.6
....................    output_drive(LCD_DATA7); 
2126:  BCF    F93.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
2128:  SWAPF  0F,W
212A:  MOVWF  00
212C:  MOVLW  F0
212E:  ANDWF  00,F
2130:  MOVF   00,W
2132:  IORWF  0E,W
2134:  MOVWF  01
.................... } 
2136:  GOTO   2146 (RETURN)
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
2096:  CLRF   10
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
2098:  BSF    F93.4
209A:  MOVLW  00
209C:  BTFSC  F81.4
209E:  MOVLW  01
20A0:  IORWF  10,F
....................    n |= input(LCD_DATA5) << 1; 
20A2:  BSF    F93.5
20A4:  MOVLW  00
20A6:  BTFSC  F81.5
20A8:  MOVLW  01
20AA:  MOVWF  00
20AC:  BCF    FD8.0
20AE:  RLCF   00,F
20B0:  MOVF   00,W
20B2:  IORWF  10,F
....................    n |= input(LCD_DATA6) << 2; 
20B4:  BSF    F93.6
20B6:  MOVLW  00
20B8:  BTFSC  F81.6
20BA:  MOVLW  01
20BC:  MOVWF  00
20BE:  RLCF   00,F
20C0:  RLCF   00,F
20C2:  MOVLW  FC
20C4:  ANDWF  00,F
20C6:  MOVF   00,W
20C8:  IORWF  10,F
....................    n |= input(LCD_DATA7) << 3; 
20CA:  BSF    F93.7
20CC:  MOVLW  00
20CE:  BTFSC  F81.7
20D0:  MOVLW  01
20D2:  MOVWF  00
20D4:  RLCF   00,F
20D6:  RLCF   00,F
20D8:  RLCF   00,F
20DA:  MOVLW  F8
20DC:  ANDWF  00,F
20DE:  MOVF   00,W
20E0:  IORWF  10,F
....................     
....................    return(n); 
20E2:  MOVFF  10,01
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
20E6:  RETURN 0
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
2050:  BTFSC  0F.0
2052:  BRA    2058
2054:  BCF    F8A.4
2056:  BRA    205A
2058:  BSF    F8A.4
205A:  BCF    F93.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
205C:  BTFSC  0F.1
205E:  BRA    2064
2060:  BCF    F8A.5
2062:  BRA    2066
2064:  BSF    F8A.5
2066:  BCF    F93.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
2068:  BTFSC  0F.2
206A:  BRA    2070
206C:  BCF    F8A.6
206E:  BRA    2072
2070:  BSF    F8A.6
2072:  BCF    F93.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
2074:  BTFSC  0F.3
2076:  BRA    207C
2078:  BCF    F8A.7
207A:  BRA    207E
207C:  BSF    F8A.7
207E:  BCF    F93.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
2080:  NOP   
....................    lcd_output_enable(1); 
2082:  BSF    F8A.0
2084:  BCF    F93.0
....................    delay_us(2); 
2086:  MOVLW  07
2088:  MOVWF  00
208A:  DECFSZ 00,F
208C:  BRA    208A
208E:  BRA    2090
....................    lcd_output_enable(0); 
2090:  BCF    F8A.0
2092:  BCF    F93.0
.................... } 
2094:  RETURN 0
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
213A:  BCF    F93.0
....................    lcd_rs_tris(); 
213C:  BCF    F93.1
....................    lcd_rw_tris(); 
213E:  BCF    F93.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
2140:  BCF    F8A.1
2142:  BCF    F93.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
2144:  BRA    20E8
2146:  MOVFF  01,0E
214A:  BTFSC  01.7
214C:  BRA    2144
....................    lcd_output_rs(address); 
214E:  MOVF   0C,F
2150:  BNZ   2156
2152:  BCF    F8A.1
2154:  BRA    2158
2156:  BSF    F8A.1
2158:  BCF    F93.1
....................    delay_cycles(1); 
215A:  NOP   
....................    lcd_output_rw(0); 
215C:  BCF    F8A.2
215E:  BCF    F93.2
....................    delay_cycles(1); 
2160:  NOP   
....................    lcd_output_enable(0); 
2162:  BCF    F8A.0
2164:  BCF    F93.0
....................    lcd_send_nibble(n >> 4); 
2166:  SWAPF  0D,W
2168:  MOVWF  0E
216A:  MOVLW  0F
216C:  ANDWF  0E,F
216E:  MOVFF  0E,0F
2172:  RCALL  2050
....................    lcd_send_nibble(n & 0xf); 
2174:  MOVF   0D,W
2176:  ANDLW  0F
2178:  MOVWF  0E
217A:  MOVWF  0F
217C:  RCALL  2050
.................... } 
217E:  RETURN 0
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
2180:  BCF    F93.4
....................    output_drive(LCD_DATA5); 
2182:  BCF    F93.5
....................    output_drive(LCD_DATA6); 
2184:  BCF    F93.6
....................    output_drive(LCD_DATA7); 
2186:  BCF    F93.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
2188:  BCF    F93.0
....................    lcd_rs_tris(); 
218A:  BCF    F93.1
....................    lcd_rw_tris(); 
218C:  BCF    F93.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
218E:  BCF    F8A.1
2190:  BCF    F93.1
....................    lcd_output_rw(0); 
2192:  BCF    F8A.2
2194:  BCF    F93.2
....................    lcd_output_enable(0); 
2196:  BCF    F8A.0
2198:  BCF    F93.0
....................      
....................    delay_ms(15); 
219A:  MOVLW  0F
219C:  MOVWF  08
219E:  RCALL  2028
....................    for(i=1;i<=3;++i) 
21A0:  MOVLW  01
21A2:  MOVWF  05
21A4:  MOVF   05,W
21A6:  SUBLW  03
21A8:  BNC   21BE
....................    { 
....................        lcd_send_nibble(3); 
21AA:  MOVLW  03
21AC:  MOVWF  0F
21AE:  RCALL  2050
....................        lcd_send_nibble(0); 
21B0:  CLRF   0F
21B2:  RCALL  2050
....................        delay_ms(5); 
21B4:  MOVLW  05
21B6:  MOVWF  08
21B8:  RCALL  2028
....................    } 
21BA:  INCF   05,F
21BC:  BRA    21A4
....................     
....................    lcd_send_nibble(2); 
21BE:  MOVLW  02
21C0:  MOVWF  0F
21C2:  RCALL  2050
....................    lcd_send_nibble(0); 
21C4:  CLRF   0F
21C6:  RCALL  2050
....................    delay_ms(5); 
21C8:  MOVLW  05
21CA:  MOVWF  08
21CC:  RCALL  2028
....................    for(i=0;i<=3;++i) 
21CE:  CLRF   05
21D0:  MOVF   05,W
21D2:  SUBLW  03
21D4:  BNC   21E8
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
21D6:  CLRF   03
21D8:  MOVF   05,W
21DA:  RCALL  2008
21DC:  MOVWF  06
21DE:  CLRF   0C
21E0:  MOVWF  0D
21E2:  RCALL  213A
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
21E4:  INCF   05,F
21E6:  BRA    21D0
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
21E8:  GOTO   2298 (RETURN)
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................     
....................    if(y!=1) 
21EC:  DECFSZ 09,W
21EE:  BRA    21F2
21F0:  BRA    21F8
....................       address=LCD_LINE_TWO; 
21F2:  MOVLW  40
21F4:  MOVWF  0A
....................    else 
21F6:  BRA    21FA
....................       address=0; 
21F8:  CLRF   0A
....................       
....................    address+=x-1; 
21FA:  MOVLW  01
21FC:  SUBWF  08,W
21FE:  ADDWF  0A,F
....................    lcd_send_byte(0,0x80|address); 
2200:  MOVF   0A,W
2202:  IORLW  80
2204:  MOVWF  0B
2206:  CLRF   0C
2208:  MOVWF  0D
220A:  RCALL  213A
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
220C:  RETURN 0
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
220E:  MOVF   07,W
2210:  XORLW  07
2212:  BZ    2222
2214:  XORLW  0B
2216:  BZ    222C
2218:  XORLW  06
221A:  BZ    223C
221C:  XORLW  02
221E:  BZ    2248
2220:  BRA    2252
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
2222:  MOVLW  01
2224:  MOVWF  08
2226:  MOVWF  09
2228:  RCALL  21EC
222A:  BRA    225E
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
222C:  CLRF   0C
222E:  MOVLW  01
2230:  MOVWF  0D
2232:  RCALL  213A
....................                      delay_ms(2); 
2234:  MOVLW  02
2236:  MOVWF  08
2238:  RCALL  2028
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
223A:  BRA    225E
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
223C:  MOVLW  01
223E:  MOVWF  08
2240:  MOVLW  02
2242:  MOVWF  09
2244:  RCALL  21EC
2246:  BRA    225E
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
2248:  CLRF   0C
224A:  MOVLW  10
224C:  MOVWF  0D
224E:  RCALL  213A
2250:  BRA    225E
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
2252:  MOVLW  01
2254:  MOVWF  0C
2256:  MOVFF  07,0D
225A:  RCALL  213A
225C:  BRA    225E
....................      #endif 
....................    } 
.................... } 
225E:  RETURN 0
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
....................  
.................... void main() { 
*
2282:  CLRF   FF8
2284:  BCF    FD0.7
2286:  CLRF   FEA
2288:  CLRF   FE9
228A:  MOVF   FC1,W
228C:  ANDLW  C0
228E:  IORLW  0F
2290:  MOVWF  FC1
2292:  MOVLW  07
2294:  MOVWF  FB4
....................  
....................    lcd_init(); 
2296:  BRA    2180
....................    printf(lcd_putc,"\f");  //BORRAMOS PANTALLA 
2298:  MOVLW  0C
229A:  MOVWF  07
229C:  RCALL  220E
....................  
....................    while (TRUE) { 
....................       lcd_gotoxy(1,1); 
229E:  MOVLW  01
22A0:  MOVWF  08
22A2:  MOVWF  09
22A4:  RCALL  21EC
....................       printf(lcd_putc,"HOLA MUNDO"); 
22A6:  MOVLW  1C
22A8:  MOVWF  FF6
22AA:  MOVLW  20
22AC:  MOVWF  FF7
22AE:  BRA    2260
....................       delay_ms(200); 
22B0:  MOVLW  C8
22B2:  MOVWF  08
22B4:  RCALL  2028
....................     } 
22B6:  BRA    229E
....................    } 
....................  
22B8:  SLEEP 

Configuration Fuses:
   Word  1: CE24   PLL5 CPUDIV1 USBDIV HSPLL FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV20 VREGEN NOWDT WDT32768
   Word  3: 8500   CCP2C1 NOPBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
