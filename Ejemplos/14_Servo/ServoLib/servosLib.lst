CCS PCH C Compiler, Version 4.120, 5967               22-sep-15 12:59

               Filename: E:\Pinguino JACSS\Ejemplos\14_Servo\ServoLib\servosLib.lst

               ROM used: 440 bytes (1%)
                         Largest free fragment is 24132
               RAM used: 32 (2%) at main() level
                         38 (2%) worst case
               Stack:    3 worst case (1 in main + 2 for interrupts)

*
2000:  GOTO   2186
*
2008:  MOVWF  04
200A:  MOVFF  FD8,05
200E:  MOVFF  FE0,06
2012:  MOVLB  0
2014:  MOVFF  FE9,0C
2018:  MOVFF  FEA,07
201C:  MOVFF  FE1,08
2020:  MOVFF  FE2,09
2024:  MOVFF  FD9,0A
2028:  MOVFF  FDA,0B
202C:  MOVFF  FF3,12
2030:  MOVFF  FF4,13
2034:  MOVFF  FFA,14
2038:  MOVFF  FF5,15
203C:  MOVFF  FF6,16
2040:  MOVFF  FF7,17
2044:  MOVFF  00,0E
2048:  MOVFF  01,0F
204C:  MOVFF  02,10
2050:  MOVFF  03,11
2054:  BTFSS  F9D.1
2056:  GOTO   2060
205A:  BTFSC  F9E.1
205C:  GOTO   20EE
2060:  MOVFF  0E,00
2064:  MOVFF  0F,01
2068:  MOVFF  10,02
206C:  MOVFF  11,03
2070:  MOVFF  0C,FE9
2074:  MOVFF  07,FEA
2078:  BSF    07.7
207A:  MOVFF  08,FE1
207E:  MOVFF  09,FE2
2082:  MOVFF  0A,FD9
2086:  MOVFF  0B,FDA
208A:  MOVFF  12,FF3
208E:  MOVFF  13,FF4
2092:  MOVFF  14,FFA
2096:  MOVFF  15,FF5
209A:  MOVFF  16,FF6
209E:  MOVFF  17,FF7
20A2:  MOVF   04,W
20A4:  MOVFF  06,FE0
20A8:  MOVFF  05,FD8
20AC:  RETFIE 0
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... //#device ADC = 10 //Define la resolucion del ADC, comentar en caso de usar 8 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV1,VREGEN,NOPBADEN 
.................... #use delay(clock=48000000) 
20CE:  MOVLW  01
20D0:  SUBWF  21,F
20D2:  BNC   20EC
20D4:  CLRF   FEA
20D6:  MOVLW  21
20D8:  MOVWF  FE9
20DA:  MOVF   FEF,W
20DC:  BZ    20EC
20DE:  MOVLW  02
20E0:  MOVWF  00
20E2:  DECFSZ 00,F
20E4:  BRA    20E2
20E6:  BRA    20E8
20E8:  DECFSZ FEF,F
20EA:  BRA    20DE
20EC:  RETURN 0
.................... #include <usb/usb_bootloader.h> //Comenta esta línea si no usas Bootloader 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                     USB_BOOTLOADER.H                              //// 
.................... ////                                                                   //// 
.................... ////  This include file must be included by any application loaded     //// 
.................... ////  by the example USB bootloader (ex_usb_bootloader                 //// 
.................... ////                                                                   //// 
.................... ////  The directives in this file relocate the reset and interrupt     //// 
.................... ////  vectors as well as reserving space for the bootloader.           //// 
.................... ////                                                                   //// 
.................... ////  For more documentation see ex_usb_bootloader.c                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// VERSION HISTORY                                                   //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... //how big is the bootloader? 
.................... //the bootloader will reside from address 0x0000 to this location.  the 
.................... //application will then sit at this location+1 to the end of program memory. 
.................... //#if defined(__DEBUG) 
.................... #define LOADER_SIZE        (0x1FFF) 
.................... //#else 
.................... //#define LOADER_SIZE        (0x17FF) 
.................... //#endif 
....................  
.................... //the loader and application need a common flag that determines if we are in 
.................... //the bootloader or application, that way the ISR knows where to go.  this 
.................... //is the location in ram that is reserved for this flag. 
.................... #define LOC_IN_LOADER_FLAG  0x25 
....................  
.................... //// --- end configuration --- //////////////////////////////////////////// 
....................  
.................... #reserve LOC_IN_LOADER_FLAG 
....................  
.................... int8 g_InBootloader; 
.................... #locate g_InBootloader=LOC_IN_LOADER_FLAG 
....................  
.................... #define LOADER_START       (0) 
.................... #define LOADER_END         (LOADER_SIZE) 
.................... #define APPLICATION_START  (LOADER_SIZE+1) 
.................... #if defined(__USB_87J50__) 
....................  #define APPLICATION_END    (getenv("PROGRAM_MEMORY")-9) //configuration bits 
.................... #else 
....................  #define APPLICATION_END    (getenv("PROGRAM_MEMORY")-1) 
.................... #endif  
.................... #define APPLICATION_ISR    (APPLICATION_START+8) 
....................  
.................... #ifdef _bootloader 
....................  /* 
....................   Provide an empty application, so if you load this .HEX file into the pic 
....................   without an application this will prevent the pic from executing unknown code. 
....................  */ 
....................  #org APPLICATION_START,APPLICATION_START+0xF 
....................  void BlankApplication(void)  
....................  { 
....................    while(TRUE); 
....................  } 
....................  
....................  //we need to prevent the loader from using application space 
....................  #if (APPLICATION_END > 0x10000) 
....................    #org APPLICATION_START+0x10, 0xFFFF {} 
....................    #if (APPLICATION_END > 0x20000) 
....................       #org 0x10000, 0x1FFFF {} 
....................       #org 0x20000, APPLICATION_END {} 
....................    #else 
....................       #org 0x10000, APPLICATION_END {} 
....................    #endif 
....................  #else 
....................    #org APPLICATION_START+0x10, APPLICATION_END {} 
....................  #endif 
....................  
....................    #define  USB_CONFIG_VID       0x04D8 
....................     
....................    #define  USB_CONFIG_PID       0x0002 
....................  
....................    #define USB_STRINGS_OVERWRITTEN 
....................    char USB_STRING_DESC_OFFSET[]={0,4,12}; 
....................  
....................    // Here is where the "CCS" Manufacturer string and "SERIAL DEMO" are stored. 
....................    // Strings are saved as unicode. 
....................    // These strings are mostly only displayed during the add hardware wizard. 
....................    // Once the operating system drivers have been installed it will usually display 
....................    // the name from the drivers .INF. 
....................    char const USB_STRING_DESC[]={ 
....................       //string 0 
....................             4, //length of string index 
....................             0x03, //USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................             0x09,0x04,   //Microsoft Defined for US-English 
....................       //string 1  - manufacturer 
....................             12, //length of string index 
....................             0x03, //USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................             'P',0, 
....................             'I',0, 
....................             'N',0, 
....................             'G',0, 
....................             'U',0, 
....................             'I',0, 
....................             'N',0, 
....................             'O',0, 
....................       //string 2 - product 
....................             24, //length of string index 
....................             0x03, //USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................             'P',0, 
....................             'I',0, 
....................             'N',0, 
....................             'G',0, 
....................             'U',0, 
....................             'I',0, 
....................             'N',0, 
....................             'O',0, 
....................             ' ',0, 
....................             'J',0, 
....................             'A',0, 
....................             'C',0, 
....................             'S',0, 
....................             'S',0, 
....................    }; 
.................... #endif   //_bootloader 
....................  
.................... #ifndef _bootloader 
....................  #define  USB_CONFIG_VID       0x04D8 
....................  #define  USB_CONFIG_PID       0x0002 
....................  //in the application, this moves the reset and isr vector out of the bootload 
....................  //space.  it then reserves the loader space from being used by the application. 
....................  #build(reset=APPLICATION_START, interrupt=APPLICATION_ISR) 
....................  #org 0, LOADER_END {} 
.................... #endif 
....................  
.................... #define servo PIN_B0    //define pin de saida para servo 
.................... #include <servoSof.c>  //Libreria para usar servo 
.................... //***** Libreria para control de un ServoMotor por interrupcion por timer*****// 
.................... //    Funciones:                                                             // 
.................... //    initServo()     para incializar servo                                 // 
.................... //    setServo(int grados)   Recibe o grados para ubicar servo             // 
.................... //    Creada por: Ing. Jannier I. Abreu Bernat                            // 
.................... //***********************************************************************// 
.................... //#define servo PIN_B0    declara señal para servo  
.................... #define RMIN (int16)550 
.................... #define RMAX (int16)2450  
....................  
.................... int count_123=0; 
.................... int16 retardo_123=1500, grados_123=0; 
....................  
.................... #int_TIMER2 
.................... void  TIMER2_isr(void)  
.................... { 
....................    count_123++; 
20EE:  INCF   19,F
....................    retardo_123=500 + ((2000/180)*grados_123); // 
20F0:  CLRF   21
20F2:  MOVLW  0B
20F4:  MOVWF  20
20F6:  MOVFF  1D,23
20FA:  MOVFF  1C,22
20FE:  BRA    20AE
2100:  MOVF   01,W
2102:  ADDLW  F4
2104:  MOVWF  1A
2106:  MOVLW  01
2108:  ADDWFC 02,W
210A:  MOVWF  1B
....................    if (retardo_123>RMAX)  retardo_123=RMAX; 
210C:  MOVF   1B,W
210E:  SUBLW  08
2110:  BC    2124
2112:  XORLW  FF
2114:  BNZ   211C
2116:  MOVF   1A,W
2118:  SUBLW  92
211A:  BC    2124
211C:  MOVLW  09
211E:  MOVWF  1B
2120:  MOVLW  92
2122:  MOVWF  1A
....................    if (retardo_123<RMIN)  retardo_123=RMIN; 
2124:  MOVF   1B,W
2126:  SUBLW  02
2128:  BNC   213A
212A:  BNZ   2132
212C:  MOVF   1A,W
212E:  SUBLW  25
2130:  BNC   213A
2132:  MOVLW  02
2134:  MOVWF  1B
2136:  MOVLW  26
2138:  MOVWF  1A
....................    if (count_123==2) { 
213A:  MOVF   19,W
213C:  SUBLW  02
213E:  BNZ   2162
....................       output_high(servo); 
2140:  BCF    F93.0
2142:  BSF    F8A.0
....................       delay_us(retardo_123); 
2144:  MOVFF  1B,20
2148:  INCF   20,F
214A:  DECF   20,F
214C:  BTFSC  FD8.2
214E:  BRA    2156
2150:  SETF   21
2152:  RCALL  20CE
2154:  BRA    214A
2156:  MOVFF  1A,21
215A:  RCALL  20CE
....................       output_low(servo); 
215C:  BCF    F93.0
215E:  BCF    F8A.0
....................       count_123=0; 
2160:  CLRF   19
....................    }  
.................... } 
....................  
2162:  BCF    F9E.1
2164:  GOTO   2060
.................... void initServo(){ 
....................    setup_timer_2(T2_DIV_BY_16,196,16);      //630 us overflow, 10.0 ms interrupt 
2168:  MOVLW  78
216A:  IORLW  06
216C:  MOVWF  FCA
216E:  MOVLW  C4
2170:  MOVWF  FCB
....................    enable_interrupts(INT_TIMER2); 
2172:  BSF    F9D.1
....................    enable_interrupts(GLOBAL); 
2174:  MOVLW  C0
2176:  IORWF  FF2,F
....................    return; 
.................... } 
2178:  GOTO   21B2 (RETURN)
....................  
.................... void setServo(int8 grad){ 
....................    grados_123=grad; 
217C:  CLRF   1D
217E:  MOVFF  1F,1C
....................    return; 
.................... } 
2182:  GOTO   21B8 (RETURN)
....................  
....................  
.................... int8 grados=0; 
....................  
.................... void main() 
.................... { 
2186:  CLRF   FF8
2188:  BCF    FD0.7
218A:  BSF    07.7
218C:  CLRF   FEA
218E:  CLRF   FE9
2190:  CLRF   19
2192:  MOVLW  05
2194:  MOVWF  1B
2196:  MOVLW  DC
2198:  MOVWF  1A
219A:  CLRF   1D
219C:  CLRF   1C
219E:  CLRF   1E
21A0:  MOVF   FC1,W
21A2:  ANDLW  C0
21A4:  IORLW  0F
21A6:  MOVWF  FC1
21A8:  MOVLW  07
21AA:  MOVWF  FB4
....................    SET_TRIS_A(0b00010000);    //Ponemos PIN_A4 como entrada 
21AC:  MOVLW  10
21AE:  MOVWF  F92
....................    initServo(); //Funcion para iniciar servo 
21B0:  BRA    2168
....................    while(TRUE) 
....................    { 
....................          setServo(grados); //Funcion para mover servo en grados 
21B2:  MOVFF  1E,1F
21B6:  BRA    217C
....................    
....................    } 
21B8:  BRA    21B2
....................        
.................... } 
21BA:  SLEEP 

Configuration Fuses:
   Word  1: CE24   PLL5 CPUDIV1 USBDIV HSPLL FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV20 VREGEN NOWDT WDT32768
   Word  3: 8500   CCP2C1 NOPBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
